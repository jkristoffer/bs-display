---
import allModels from '../../../data/models/models.all.js';
import Button from '../../common/Button/Button.astro';

interface Props {
  limit?: number;
  itemsPerPage?: number;
}

interface ProductModel {
  id: string;
  brand: string;
  model: string;
  size: number;
  resolution: string;
  os: string;
  touchTechnology: string;
  features: string[];
  warranty: string;
  priceRange: string;
  image: string;
  brightness: string;
  contrast: string;
  connectivity: string;
  powerConsumption: string;
  [key: string]: any; // Index signature for dynamic property access
}

// Get props with default values
const { limit = 50, itemsPerPage = 6 } = Astro.props;

// Get models with limit
const allDisplayedModels = (allModels as unknown as ProductModel[]).slice(0, limit);

// Calculate total number of pages
const totalPages = Math.ceil(allDisplayedModels.length / itemsPerPage);

// Initialize with first page of items
const initialModels = allDisplayedModels.slice(0, itemsPerPage);

// Define displayed properties with more details
const displayProperties = [
  { key: 'brand', label: 'Brand', icon: 'üè¢' },
  { key: 'model', label: 'Model', icon: 'üì±' },
  { key: 'size', label: 'Size', icon: 'üìè', suffix: '"' },
  { key: 'resolution', label: 'Resolution', icon: 'üéØ' },
  { key: 'touchTechnology', label: 'Touch Tech', icon: 'üëÜ' },
  { key: 'priceRange', label: 'Price', icon: 'üí∞' }
];

// Get popular brands
const popularBrands = [...new Set(allDisplayedModels.map(model => model.brand))].slice(0, 4);
---

<section class="products-showcase">
  <!-- Background Elements -->
  <div class="bg-elements">
    <div class="bg-pattern"></div>
    <div class="bg-orb bg-orb-1"></div>
    <div class="bg-orb bg-orb-2"></div>
    <div class="floating-shapes">
      <div class="shape shape-1"></div>
      <div class="shape shape-2"></div>
      <div class="shape shape-3"></div>
    </div>
  </div>
  
  <div class="products-showcase__container">
    <!-- Header Section -->
    <div class="section-header">
      <div class="header-badge">
        <span class="badge-icon">üèÜ</span>
        <span class="badge-text">Product Showcase</span>
      </div>
      
      <h2 class="section-title">
        <span class="title-gradient">Complete Display Catalog</span>
      </h2>
      
      <p class="section-description">
        Explore our comprehensive collection of interactive displays, from classroom solutions to boardroom displays
      </p>
      
      <!-- Stats Row -->
      <div class="stats-row">
        <div class="stat-item">
          <div class="stat-number">{allDisplayedModels.length}+</div>
          <div class="stat-label">Display Models</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">{popularBrands.length}</div>
          <div class="stat-label">Top Brands</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">15-86"</div>
          <div class="stat-label">Size Range</div>
        </div>
      </div>
    </div>

    <!-- Filter Section -->
    <div class="filter-section">
      <div class="filter-header">
        <h3 class="filter-title">Find Your Perfect Display</h3>
        <div class="filter-count">
          Showing <span id="showing-count">{itemsPerPage}</span> of <span id="total-count">{allDisplayedModels.length}</span> products
        </div>
      </div>
      
      <div class="filter-controls">
        <div class="filter-group">
          <label for="brand-filter" class="filter-label">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
              <path d="M21 16V8C21 6.9 20.1 6 19 6H16L14 4H10L8 6H5C3.9 6 3 6.9 3 8V16C3 17.1 3.9 18 5 18H19C20.1 18 21 17.1 21 16Z" stroke="currentColor" stroke-width="2"/>
            </svg>
            Brand
          </label>
          <select id="brand-filter" class="filter-select">
            <option value="">All Brands</option>
            {popularBrands.map(brand => (
              <option value={brand}>{brand}</option>
            ))}
          </select>
        </div>
        
        <div class="filter-group">
          <label for="size-filter" class="filter-label">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
              <rect x="2" y="3" width="20" height="14" rx="2" ry="2" stroke="currentColor" stroke-width="2"/>
              <line x1="8" y1="21" x2="16" y2="21" stroke="currentColor" stroke-width="2"/>
              <line x1="12" y1="17" x2="12" y2="21" stroke="currentColor" stroke-width="2"/>
            </svg>
            Size Range
          </label>
          <select id="size-filter" class="filter-select">
            <option value="">All Sizes</option>
            <option value="small">32" - 55"</option>
            <option value="medium">55" - 75"</option>
            <option value="large">75" - 86"</option>
          </select>
        </div>
        
        <button id="reset-filters" class="reset-button">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
            <path d="M3 12C3 7.03 7.03 3 12 3C17.97 3 22 7.03 22 12C22 17.97 17.97 22 12 22C7.03 22 3 17.97 3 12Z" stroke="currentColor" stroke-width="2"/>
            <path d="M9 9L15 15M15 9L9 15" stroke="currentColor" stroke-width="2"/>
          </svg>
          Reset
        </button>
      </div>
    </div>

    <!-- Products Grid -->
    <div class="products-grid" id="products-grid">
      {initialModels.map((model, index) => (
        <div class="product-card" style={`animation-delay: ${index * 0.1}s`}>
          <div class="card-header">
            <div class="product-image">
              <img 
                src={model.image} 
                alt={model.model} 
                loading="lazy"
                onerror="this.src='/assets/abstract-bg-1.jpeg'"
              />
              <div class="image-overlay">
                <div class="brand-badge">{model.brand}</div>
              </div>
            </div>
            
            <div class="product-meta">
              <h3 class="product-title">{model.model}</h3>
              <div class="price-range">{model.priceRange}</div>
            </div>
          </div>
          
          <div class="card-content">
            <div class="product-specs">
              {displayProperties.slice(2).map(prop => (
                <div class="spec-item">
                  <span class="spec-icon">{prop.icon}</span>
                  <span class="spec-label">{prop.label}:</span>
                  <span class="spec-value">
                    {model[prop.key]}{prop.suffix || ''}
                  </span>
                </div>
              ))}
            </div>
            
            <div class="product-features">
              {model.features && model.features.slice(0, 2).map(feature => (
                <span class="feature-tag">{feature}</span>
              ))}
            </div>
          </div>
          
          <div class="card-footer">
            <Button variant="ghost" href={`/products/${model.id}`} size="md">
              View Details
            </Button>
            <Button variant="primary" href="/contact" size="md">
              Get Quote
            </Button>
          </div>
        </div>
      ))}
    </div>

    <!-- Load More Section -->
    <div class="load-more-section" id="load-more-section">
      <div class="pagination-controls" id="pagination-controls">
        <button class="nav-button" id="prev-page" aria-label="Previous page" disabled>
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
            <polyline points="15 18 9 12 15 6" stroke="currentColor" stroke-width="2"/>
          </svg>
          Previous
        </button>
        
        <div class="page-info">
          <span class="page-indicator">
            Page <span id="current-page">1</span> of <span id="total-pages">{totalPages}</span>
          </span>
        </div>
        
        <button class="nav-button" id="next-page" aria-label="Next page" disabled={totalPages <= 1}>
          Next
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
            <polyline points="9 18 15 12 9 6" stroke="currentColor" stroke-width="2"/>
          </svg>
        </button>
      </div>
    </div>

    <!-- Footer CTA -->
    <div class="section-footer">
      <div class="footer-content">
        <h3 class="footer-title">Need Help Choosing?</h3>
        <p class="footer-description">
          Our experts can help you find the perfect display solution for your specific needs
        </p>
        <div class="footer-actions">
          <Button variant="primary" size="lg" href="/quiz">
            Take Product Quiz
          </Button>
          <Button variant="ghost" size="lg" href="/contact">
            Speak to Expert
          </Button>
        </div>
      </div>
      
      <div class="quick-links">
        <h4>Quick Access</h4>
        <div class="links-grid">
          <a href="/products">All Products</a>
          <a href="/products/smartboards">Smart Boards</a>
          <a href="/products/lecterns">Digital Lecterns</a>
          <a href="/products/accessories">Accessories</a>
        </div>
      </div>
    </div>
  </div>

  <script is:inline define:vars={{ allDisplayedModels, itemsPerPage, totalPages, displayProperties }}>
    // Store all data for client-side functionality
    let allModels = {
      original: [...allDisplayedModels],
      filtered: [...allDisplayedModels],
      currentPage: 1,
      itemsPerPage: itemsPerPage,
      totalPages: Math.ceil(allDisplayedModels.length / itemsPerPage)
    };

    // DOM elements
    const productsGrid = document.getElementById('products-grid');
    const currentPageEl = document.getElementById('current-page');
    const totalPagesEl = document.getElementById('total-pages');
    const showingCountEl = document.getElementById('showing-count');
    const totalCountEl = document.getElementById('total-count');
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    const brandFilter = document.getElementById('brand-filter');
    const sizeFilter = document.getElementById('size-filter');
    const resetButton = document.getElementById('reset-filters');

    // Create product card HTML
    function createProductCard(model, index) {
      const specs = displayProperties.slice(2).map(prop => `
        <div class="spec-item">
          <span class="spec-icon">${prop.icon}</span>
          <span class="spec-label">${prop.label}:</span>
          <span class="spec-value">${model[prop.key]}${prop.suffix || ''}</span>
        </div>
      `).join('');

      const features = model.features ? model.features.slice(0, 2).map(feature => 
        `<span class="feature-tag">${feature}</span>`
      ).join('') : '';

      return `
        <div class="product-card" style="animation-delay: ${index * 0.1}s">
          <div class="card-header">
            <div class="product-image">
              <img 
                src="${model.image}" 
                alt="${model.model}" 
                loading="lazy"
                onerror="this.src='/assets/abstract-bg-1.jpeg'"
              />
              <div class="image-overlay">
                <div class="brand-badge">${model.brand}</div>
              </div>
            </div>
            
            <div class="product-meta">
              <h3 class="product-title">${model.model}</h3>
              <div class="price-range">${model.priceRange}</div>
            </div>
          </div>
          
          <div class="card-content">
            <div class="product-specs">
              ${specs}
            </div>
            
            <div class="product-features">
              ${features}
            </div>
          </div>
          
          <div class="card-footer">
            <a href="/products/${model.id}" class="button-ghost md">View Details</a>
            <a href="/contact" class="button-primary md">Get Quote</a>
          </div>
        </div>
      `;
    }

    // Apply filters
    function applyFilters() {
      const brandValue = brandFilter.value;
      const sizeValue = sizeFilter.value;
      
      allModels.filtered = allModels.original.filter(model => {
        const brandMatch = !brandValue || model.brand === brandValue;
        
        let sizeMatch = true;
        if (sizeValue) {
          const size = parseInt(model.size);
          switch(sizeValue) {
            case 'small': sizeMatch = size >= 32 && size < 55; break;
            case 'medium': sizeMatch = size >= 55 && size < 75; break;
            case 'large': sizeMatch = size >= 75; break;
          }
        }
        
        return brandMatch && sizeMatch;
      });
      
      // Reset to first page
      allModels.currentPage = 1;
      allModels.totalPages = Math.ceil(allModels.filtered.length / allModels.itemsPerPage);
      
      renderCurrentPage();
      updateControls();
    }

    // Render current page
    function renderCurrentPage() {
      const startIdx = (allModels.currentPage - 1) * allModels.itemsPerPage;
      const endIdx = startIdx + allModels.itemsPerPage;
      const currentPageModels = allModels.filtered.slice(startIdx, endIdx);
      
      productsGrid.innerHTML = currentPageModels.map((model, index) => 
        createProductCard(model, index)
      ).join('');
    }

    // Update controls
    function updateControls() {
      currentPageEl.textContent = allModels.currentPage;
      totalPagesEl.textContent = allModels.totalPages;
      
      const startIdx = (allModels.currentPage - 1) * allModels.itemsPerPage;
      const endIdx = Math.min(startIdx + allModels.itemsPerPage, allModels.filtered.length);
      showingCountEl.textContent = endIdx - startIdx;
      totalCountEl.textContent = allModels.filtered.length;
      
      prevButton.disabled = allModels.currentPage <= 1;
      nextButton.disabled = allModels.currentPage >= allModels.totalPages;
    }

    // Navigation functions
    function goToPrevPage() {
      if (allModels.currentPage > 1) {
        allModels.currentPage--;
        renderCurrentPage();
        updateControls();
        productsGrid.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }

    function goToNextPage() {
      if (allModels.currentPage < allModels.totalPages) {
        allModels.currentPage++;
        renderCurrentPage();
        updateControls();
        productsGrid.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }

    function resetFilters() {
      brandFilter.value = '';
      sizeFilter.value = '';
      applyFilters();
    }

    // Event listeners
    prevButton.addEventListener('click', goToPrevPage);
    nextButton.addEventListener('click', goToNextPage);
    brandFilter.addEventListener('change', applyFilters);
    sizeFilter.addEventListener('change', applyFilters);
    resetButton.addEventListener('click', resetFilters);

    // Initialize
    updateControls();
  </script>
</section>

<style lang="scss">
  .products-showcase {
    position: relative;
    padding: calc(var(--spacing-xl) * 3) 0;
    background: linear-gradient(180deg, #fafbfc 0%, #ffffff 100%);
    overflow: hidden;
  }

  /* Background Elements */
  .bg-elements {
    position: absolute;
    inset: 0;
    z-index: 1;
    pointer-events: none;
  }

  .bg-pattern {
    position: absolute;
    inset: 0;
    background-image: 
      radial-gradient(circle at 25% 25%, rgba(59, 130, 246, 0.05) 0%, transparent 50%),
      radial-gradient(circle at 75% 75%, rgba(16, 185, 129, 0.05) 0%, transparent 50%);
  }

  .bg-orb {
    position: absolute;
    border-radius: 50%;
    filter: blur(150px);
    opacity: 0.1;
  }

  .bg-orb-1 {
    width: 500px;
    height: 500px;
    background: radial-gradient(circle, #3b82f6 0%, transparent 70%);
    top: -250px;
    right: -250px;
    animation: orbFloat 25s ease-in-out infinite;
  }

  .bg-orb-2 {
    width: 400px;
    height: 400px;
    background: radial-gradient(circle, #10b981 0%, transparent 70%);
    bottom: -200px;
    left: -200px;
    animation: orbFloat 20s ease-in-out infinite reverse;
  }

  .floating-shapes {
    position: absolute;
    inset: 0;
  }

  .shape {
    position: absolute;
    opacity: 0.1;
  }

  .shape-1 {
    width: 60px;
    height: 60px;
    background: linear-gradient(45deg, #3b82f6, #8b5cf6);
    border-radius: 50%;
    top: 20%;
    right: 15%;
    animation: shapeFloat1 12s ease-in-out infinite;
  }

  .shape-2 {
    width: 40px;
    height: 40px;
    background: linear-gradient(45deg, #10b981, #3b82f6);
    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
    top: 60%;
    left: 10%;
    animation: shapeFloat2 15s ease-in-out infinite;
  }

  .shape-3 {
    width: 50px;
    height: 50px;
    background: linear-gradient(45deg, #8b5cf6, #ec4899);
    border-radius: 10px;
    bottom: 30%;
    right: 20%;
    animation: shapeFloat3 18s ease-in-out infinite;
  }

  .products-showcase__container {
    max-width: var(--spacing-container-max-width);
    margin: 0 auto;
    padding: 0 var(--spacing-md);
    position: relative;
    z-index: 2;
  }

  /* Section Header */
  .section-header {
    text-align: center;
    margin-bottom: calc(var(--spacing-xl) * 2);
  }

  .header-badge {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-sm);
    padding: 8px 16px;
    background: rgba(59, 130, 246, 0.1);
    border: 1px solid rgba(59, 130, 246, 0.2);
    border-radius: 50px;
    color: #3b82f6;
    font-size: 14px;
    font-weight: 600;
    margin-bottom: var(--spacing-lg);
  }

  .section-title {
    font-size: clamp(32px, 5vw, 48px);
    margin-bottom: var(--spacing-md);
    font-weight: 700;
  }

  .title-gradient {
    background: linear-gradient(135deg, #2563eb 0%, #3b82f6 50%, #60a5fa 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .section-description {
    font-size: clamp(16px, 2.5vw, 20px);
    line-height: 1.7;
    color: var(--color-text-primary);
    opacity: 0.7;
    max-width: 700px;
    margin: 0 auto var(--spacing-xl) auto;
  }

  /* Stats Row */
  .stats-row {
    display: flex;
    justify-content: center;
    gap: calc(var(--spacing-xl) * 1.5);
    margin-top: var(--spacing-xl);
    
    @media (max-width: $breakpoint-md) {
      gap: var(--spacing-lg);
    }
    
    @media (max-width: $breakpoint-sm) {
      flex-direction: column;
      gap: var(--spacing-md);
    }
  }

  .stat-item {
    text-align: center;
  }

  .stat-number {
    font-size: clamp(24px, 4vw, 32px);
    font-weight: 800;
    background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 4px;
  }

  .stat-label {
    font-size: 14px;
    color: var(--color-text-primary);
    opacity: 0.7;
    font-weight: 500;
  }

  /* Filter Section */
  .filter-section {
    background: white;
    border-radius: 20px;
    padding: var(--spacing-xl);
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08);
    margin-bottom: calc(var(--spacing-xl) * 2);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  .filter-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-lg);
    
    @media (max-width: $breakpoint-md) {
      flex-direction: column;
      gap: var(--spacing-sm);
      text-align: center;
    }
  }

  .filter-title {
    font-size: clamp(18px, 3vw, 24px);
    font-weight: 700;
    color: var(--color-text-primary);
    margin: 0;
  }

  .filter-count {
    font-size: 14px;
    color: var(--color-text-primary);
    opacity: 0.7;
    background: rgba(59, 130, 246, 0.1);
    padding: 6px 12px;
    border-radius: 20px;
  }

  .filter-controls {
    display: flex;
    gap: var(--spacing-lg);
    align-items: end;
    
    @media (max-width: $breakpoint-md) {
      flex-direction: column;
      align-items: stretch;
    }
  }

  .filter-group {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .filter-label {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    font-size: 14px;
    font-weight: 600;
    color: var(--color-text-primary);
    
    svg {
      width: 14px;
      height: 14px;
      color: #3b82f6;
    }
  }

  .filter-select {
    padding: 12px 16px;
    border: 2px solid rgba(0, 0, 0, 0.1);
    border-radius: 12px;
    background: white;
    font-size: 14px;
    transition: all 0.3s ease;
    
    &:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
  }

  .reset-button {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: 12px 16px;
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
    border: 2px solid rgba(239, 68, 68, 0.2);
    border-radius: 12px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    
    svg {
      width: 14px;
      height: 14px;
    }
    
    &:hover {
      background: rgba(239, 68, 68, 0.2);
      border-color: #ef4444;
    }
  }

  /* Products Grid */
  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: var(--spacing-xl);
    margin-bottom: calc(var(--spacing-xl) * 2);
  }

  .product-card {
    background: white;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    animation: cardSlideUp 0.6s ease-out both;
    border: 1px solid rgba(0, 0, 0, 0.05);
    
    &:hover {
      transform: translateY(-8px);
      box-shadow: 0 12px 40px rgba(0, 0, 0, 0.12);
    }
  }

  .card-header {
    position: relative;
  }

  .product-image {
    position: relative;
    height: 200px;
    overflow: hidden;
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    
    img {
      width: 100%;
      height: 100%;
      object-fit: contain;
      padding: var(--spacing-md);
      transition: transform 0.6s ease;
    }
  }

  .image-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(
      135deg,
      rgba(0, 0, 0, 0.1) 0%,
      transparent 50%
    );
    display: flex;
    align-items: flex-start;
    justify-content: flex-end;
    padding: var(--spacing-md);
  }

  .brand-badge {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    color: var(--color-text-primary);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .product-meta {
    padding: var(--spacing-lg) var(--spacing-lg) 0;
  }

  .product-title {
    font-size: 18px;
    font-weight: 700;
    color: var(--color-text-primary);
    margin: 0 0 var(--spacing-xs) 0;
    line-height: 1.3;
  }

  .price-range {
    font-size: 16px;
    font-weight: 600;
    background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .card-content {
    padding: var(--spacing-lg);
    padding-top: var(--spacing-md);
  }

  .product-specs {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
  }

  .spec-item {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    font-size: 14px;
  }

  .spec-icon {
    font-size: 16px;
    width: 20px;
    text-align: center;
  }

  .spec-label {
    color: var(--color-text-primary);
    opacity: 0.7;
    min-width: 80px;
  }

  .spec-value {
    font-weight: 600;
    color: var(--color-text-primary);
  }

  .product-features {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-lg);
  }

  .feature-tag {
    font-size: 11px;
    padding: 4px 8px;
    background: rgba(16, 185, 129, 0.1);
    color: #10b981;
    border-radius: 12px;
    font-weight: 500;
  }

  .card-footer {
    padding: 0 var(--spacing-lg) var(--spacing-lg);
    display: flex;
    gap: var(--spacing-sm);
    
    > * {
      flex: 1;
      text-align: center;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }
  }

  /* Load More Section */
  .load-more-section {
    margin-bottom: calc(var(--spacing-xl) * 2);
  }

  .pagination-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-lg);
    
    @media (max-width: $breakpoint-sm) {
      flex-direction: column;
      gap: var(--spacing-md);
    }
  }

  .nav-button {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    padding: 12px 24px;
    background: white;
    border: 2px solid rgba(59, 130, 246, 0.2);
    border-radius: 50px;
    color: #3b82f6;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    
    svg {
      width: 16px;
      height: 16px;
    }
    
    &:hover:not(:disabled) {
      background: #3b82f6;
      color: white;
      transform: translateY(-2px);
    }
    
    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
  }

  .page-info {
    padding: 12px 24px;
    background: rgba(59, 130, 246, 0.1);
    border-radius: 50px;
    color: #3b82f6;
    font-weight: 600;
    font-size: 14px;
  }

  /* Section Footer */
  .section-footer {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: calc(var(--spacing-xl) * 2);
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    border-radius: 24px;
    padding: calc(var(--spacing-xl) * 1.5);
    
    @media (max-width: $breakpoint-lg) {
      grid-template-columns: 1fr;
      text-align: center;
    }
  }

  .footer-title {
    font-size: clamp(20px, 3vw, 28px);
    font-weight: 700;
    color: var(--color-text-primary);
    margin: 0 0 var(--spacing-sm) 0;
  }

  .footer-description {
    font-size: 16px;
    color: var(--color-text-primary);
    opacity: 0.8;
    margin: 0 0 var(--spacing-lg) 0;
    line-height: 1.6;
  }

  .footer-actions {
    display: flex;
    gap: var(--spacing-md);
    
    @media (max-width: $breakpoint-sm) {
      flex-direction: column;
    }
  }

  .quick-links {
    h4 {
      font-size: 18px;
      font-weight: 600;
      color: var(--color-text-primary);
      margin: 0 0 var(--spacing-md) 0;
    }
  }

  .links-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-sm);
    
    a {
      color: var(--color-text-primary);
      text-decoration: none;
      font-size: 14px;
      padding: 8px 12px;
      border-radius: 8px;
      transition: all 0.3s ease;
      
      &:hover {
        background: rgba(59, 130, 246, 0.1);
        color: #3b82f6;
      }
    }
  }

  /* Animations */
  @keyframes orbFloat {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    50% { transform: translate(-30px, -20px) rotate(180deg); }
  }

  @keyframes shapeFloat1 {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
  }

  @keyframes shapeFloat2 {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    50% { transform: translateY(-15px) rotate(-90deg); }
  }

  @keyframes shapeFloat3 {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    50% { transform: translateY(-25px) rotate(45deg); }
  }

  @keyframes cardSlideUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation: none !important;
      transition: none !important;
    }
  }
</style>