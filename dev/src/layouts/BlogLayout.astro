---
import MainLayout from './MainLayout.astro';
import RelatedBlogPosts from '../components/blog/RelatedBlogPosts.astro';
import styles from '../components/layouts/BlogLayout.module.scss';

interface Props {
  title: string;
  description: string;
  publishDate?: Date;
  author?: string;
  category?: string;
  image?: string;
  canonicalUrl?: string;
}

const {
  title,
  description,
  publishDate,
  author,
  category,
  image,
  canonicalUrl
} = Astro.props;

// Format date if provided
const formattedDate = publishDate
  ? new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }).format(publishDate)
  : null;

// Generate canonical URL
const siteUrl = import.meta.env.SITE || Astro.url.origin;
const resolvedCanonicalUrl =
  canonicalUrl || new URL(Astro.url.pathname, siteUrl).href;

// Prepare structured data for blog post
const structuredData =
  publishDate && author
    ? {
        '@context': 'https://schema.org',
        '@type': 'BlogPosting',
        headline: title,
        description,
        datePublished: publishDate.toISOString(),
        author: {
          '@type': 'Person',
          name: author
        },
        ...(image && { image: new URL(image, siteUrl).href }),
        ...(category && { keywords: category }),
        publisher: {
          '@type': 'Organization',
          name: 'BS Display',
          url: siteUrl,
          logo: {
            '@type': 'ImageObject',
            url: new URL('/logo.png', siteUrl).href,
            width: 600,
            height: 60
          }
        },
        mainEntityOfPage: {
          '@type': 'WebPage',
          '@id': resolvedCanonicalUrl
        }
      }
    : null;
---

<MainLayout
  title={title}
  description={description}
  ogTitle={title}
  ogDescription={description}
  ogImage={image}
  ogType="article"
  twitterCard="summary_large_image"
  twitterTitle={title}
  twitterDescription={description}
  twitterImage={image}
  canonicalUrl={resolvedCanonicalUrl}
  structuredData={structuredData ? JSON.stringify(structuredData) : undefined}
>
  <!-- Blog Background Elements -->
  <div class={styles.blogBgElements}>
    <div class={styles.bgPattern}></div>
    <div class={`${styles.bgGlow} ${styles.bgGlow1}`}></div>
    <div class={`${styles.bgGlow} ${styles.bgGlow2}`}></div>
  </div>

  <div class={styles.blogArticleModern}>
    <!-- Hero Section -->
    <header class={styles.articleHero}>
      <div class={styles.heroContent}>
        <div class={styles.articleMeta}>
          {category && (
            <span class={styles.categoryBadge}>
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                <path d="M7 7H17V17H7Z" stroke="currentColor" stroke-width="2"/>
                <path d="M3 3V8H8" stroke="currentColor" stroke-width="2"/>
              </svg>
              {category}
            </span>
          )}
          {publishDate && (
            <time datetime={publishDate.toISOString()} class={styles.publishDate}>
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                <polyline points="12 6 12 12 16 14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              {formattedDate}
            </time>
          )}
        </div>
        
        <h1 class={`${styles.articleTitle} animate-fade-up`}>{title}</h1>
        
        <div class={`${styles.articleDescription} animate-fade-up`}>
          <p>{description}</p>
        </div>
        
        {author && (
          <div class={`${styles.authorSection} animate-fade-up`}>
            <div class={styles.authorAvatar}>
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M20 21V19C20 17.9 19.1 17 18 17H6C4.9 17 4 17.9 4 19V21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <circle cx="12" cy="7" r="4" stroke="currentColor" stroke-width="2"/>
              </svg>
            </div>
            <div class={styles.authorInfo}>
              <span class={styles.authorName}>By {author}</span>
              <span class={styles.authorTitle}>Content Specialist</span>
            </div>
          </div>
        )}
        
        <!-- Reading Progress Bar -->
        <div class={styles.readingProgress}>
          <div class={styles.progressBar} id="reading-progress-bar"></div>
        </div>
      </div>
      
      <!-- Article Image -->
      {image && (
        <div class={`${styles.heroImage} animate-fade-up`}>
          <img src={image} alt={title} loading="lazy" />
          <div class={styles.imageOverlay}></div>
        </div>
      )}
    </header>

    <!-- Article Content -->
    <div class={styles.articleContainer}>
      <aside class={`${styles.tableOfContents} glass-light`}>
        <h3>Table of Contents</h3>
        <nav id="toc-nav">
          <!-- TOC will be generated by JavaScript -->
        </nav>
      </aside>
      
      <article class={`${styles.articleContent} glass-white animate-fade-up`}>
        <div class={styles.contentWrapper}>
          <slot />
        </div>
        
        <!-- Article Actions -->
        <div class={styles.articleActions}>
          <div class={styles.shareButtons}>
            <span class={styles.shareLabel}>Share this article</span>
            <div class={styles.shareIcons}>
              <button class={`${styles.shareBtn} button-glass`} data-share="twitter">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path d="M23 3A10.9 10.9 0 0 1 20.1 4.7C19.2 3.9 18 3.4 16.7 3.4C14.2 3.4 12.2 5.4 12.2 7.9C12.2 8.3 12.2 8.6 12.3 8.9C8.7 8.7 5.6 6.9 3.6 4.2C3.2 4.9 3 5.7 3 6.6C3 8.3 3.9 9.8 5.2 10.7C4.4 10.7 3.7 10.4 3.1 10V10.1C3.1 12.3 4.7 14.1 6.8 14.5C6.4 14.6 6 14.6 5.6 14.6C5.3 14.6 5 14.6 4.7 14.5C5.3 16.3 7 17.6 9.1 17.6C7.5 18.8 5.5 19.5 3.3 19.5C2.9 19.5 2.6 19.5 2.2 19.4C4.3 20.7 6.8 21.4 9.4 21.4C16.7 21.4 20.7 14.7 20.7 8.5V7.9C21.5 7.4 22.2 6.7 22.7 5.9C22 6.2 21.2 6.4 20.4 6.5C21.2 6.1 21.9 5.4 22.2 4.6C21.4 5 20.5 5.3 19.6 5.4C18.8 4.6 17.7 4.1 16.5 4.1Z" stroke="currentColor" stroke-width="2"/>
                </svg>
              </button>
              <button class={`${styles.shareBtn} button-glass`} data-share="linkedin">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path d="M16 8C18.21 8 20 9.79 20 12V21H16V12C16 11.45 15.55 11 15 11S14 11.45 14 12V21H10V12C10 9.79 11.79 8 14 8H16Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <rect x="2" y="9" width="4" height="12" stroke="currentColor" stroke-width="2"/>
                  <circle cx="4" cy="4" r="2" stroke="currentColor" stroke-width="2"/>
                </svg>
              </button>
              <button class={`${styles.shareBtn} button-glass`} data-share="copy">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <rect x="9" y="9" width="13" height="13" rx="2" ry="2" stroke="currentColor" stroke-width="2"/>
                  <path d="M5 15H4C2.9 15 2 14.1 2 13V4C2 2.9 2.9 2 4 2H13C14.1 2 15 2.9 15 4V5" stroke="currentColor" stroke-width="2"/>
                </svg>
              </button>
            </div>
          </div>
          
          <!-- Article Tags -->
          {category && (
            <div class={styles.articleTags}>
              <span class={styles.tagsLabel}>Filed under:</span>
              <span class={`${styles.tag} button-faint`}>{category}</span>
            </div>
          )}
        </div>
      </article>
      
      <!-- Sidebar -->
      <aside class={styles.articleSidebar}>
        <div class={`${styles.sidebarWidget} glass-light`}>
          <h4>Key Takeaways</h4>
          <div class={styles.takeaways} id="key-takeaways">
            <!-- Generated from content headings -->
          </div>
        </div>
        
        <div class={`${styles.sidebarWidget} glass-light`}>
          <h4>Reading Stats</h4>
          <div class={styles.readingStats}>
            <div class={styles.statItem}>
              <span class={styles.statIcon}>üìñ</span>
              <div class={styles.statContent}>
                <div class={styles.statNumber} id="word-count">0</div>
                <div class={styles.statLabel}>Words</div>
              </div>
            </div>
            <div class={styles.statItem}>
              <span class={styles.statIcon}>‚è±Ô∏è</span>
              <div class={styles.statContent}>
                <div class={styles.statNumber} id="read-time">5</div>
                <div class={styles.statLabel}>Min Read</div>
              </div>
            </div>
          </div>
        </div>
      </aside>
    </div>
  </div>

  {/* Add related blog posts component */}
  <RelatedBlogPosts
    currentSlug={Astro.url.pathname.split('/').pop() || ''}
    category={category}
  />

  
  <script>
    // Table of Contents Generation
    document.addEventListener('DOMContentLoaded', () => {
      const tocNav = document.getElementById('toc-nav');
      const headings = document.querySelectorAll('[class*="contentWrapper"] h2, [class*="contentWrapper"] h3');
      const progressBar = document.getElementById('reading-progress-bar');
      const wordCountEl = document.getElementById('word-count');
      const readTimeEl = document.getElementById('read-time');
      
      // Generate TOC
      if (tocNav && headings.length > 0) {
        const tocList = document.createElement('ul');
        
        headings.forEach((heading, index) => {
          const id = `heading-${index}`;
          heading.id = id;
          
          const listItem = document.createElement('li');
          const link = document.createElement('a');
          link.href = `#${id}`;
          link.textContent = heading.textContent;
          link.addEventListener('click', (e) => {
            e.preventDefault();
            heading.scrollIntoView({ behavior: 'smooth' });
          });
          
          listItem.appendChild(link);
          tocList.appendChild(listItem);
        });
        
        tocNav.appendChild(tocList);
      }
      
      // Reading Progress
      function updateReadingProgress() {
        const winScroll = window.pageYOffset || document.documentElement.scrollTop;
        const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
        const scrolled = (winScroll / height) * 100;
        
        if (progressBar) {
          progressBar.style.width = scrolled + '%';
        }
      }
      
      window.addEventListener('scroll', updateReadingProgress);
      
      // Word Count and Reading Time
      const contentText = document.querySelector('[class*="contentWrapper"]')?.textContent || '';
      const wordCount = contentText.trim().split(/\s+/).length;
      const readingTime = Math.ceil(wordCount / 200); // 200 words per minute
      
      if (wordCountEl) wordCountEl.textContent = wordCount.toLocaleString();
      if (readTimeEl) readTimeEl.textContent = readingTime.toString();
      
      // Share Functionality
      const shareButtons = document.querySelectorAll('.share-btn');
      shareButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          const shareType = btn.getAttribute('data-share');
          const url = window.location.href;
          const title = document.title;
          
          switch (shareType) {
            case 'twitter':
              window.open(`https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`, '_blank');
              break;
            case 'linkedin':
              window.open(`https://linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`, '_blank');
              break;
            case 'copy':
              navigator.clipboard.writeText(url).then(() => {
                btn.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none"><path d="M20 6L9 17L4 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>';
                setTimeout(() => {
                  btn.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none"><rect x="9" y="9" width="13" height="13" rx="2" ry="2" stroke="currentColor" stroke-width="2"/><path d="M5 15H4C2.9 15 2 14.1 2 13V4C2 2.9 2.9 2 4 2H13C14.1 2 15 2.9 15 4V5" stroke="currentColor" stroke-width="2"/></svg>';
                }, 2000);
              });
              break;
          }
        });
      });
      
      // Active TOC highlighting
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const id = entry.target.id;
            const activeLink = tocNav?.querySelector(`a[href="#${id}"]`);
            
            // Remove all active classes
            tocNav?.querySelectorAll('a').forEach(link => link.classList.remove('active'));
            
            // Add active class to current link
            if (activeLink) {
              activeLink.classList.add('active');
            }
          }
        });
      }, {
        rootMargin: '-20% 0% -80% 0%'
      });
      
      headings.forEach(heading => observer.observe(heading));
    });
  </script>

</MainLayout>
