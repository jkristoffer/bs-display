---
import allModels from '../../../data/models.all.js';

interface Props {
  limit?: number;
  itemsPerPage?: number;
}

interface ProductModel {
  id: string;
  brand: string;
  model: string;
  size: number;
  resolution: string;
  os: string;
  touchTechnology: string;
  features: string[];
  warranty: string;
  priceRange: string;
  image: string;
  brightness: string;
  contrast: string;
  connectivity: string;
  powerConsumption: string;
  [key: string]: any; // Index signature for dynamic property access
}

// Get props with default values
const { limit = 50, itemsPerPage = 8 } = Astro.props;

// Get models with limit
const allDisplayedModels = (allModels as unknown as ProductModel[]).slice(0, limit);

// Calculate total number of pages
const totalPages = Math.ceil(allDisplayedModels.length / itemsPerPage);

// Initialize with first page of items
const initialModels = allDisplayedModels.slice(0, itemsPerPage);

// Define displayed properties
const displayProperties = [
  'brand',
  'model',
  'size',
  'os',
  'touchTechnology'
];

// Format property name for display
function formatPropertyName(prop: string): string {
  return prop.charAt(0).toUpperCase() + prop.slice(1);
}
---

<section class="section section--with-background">
  <div class="container">
    <div class="product-table">
      <h2 class="product-table__title">Available Products</h2>
      <p class="product-table__description">
        Browse our extensive range of interactive displays for education and business.
      </p>
      
      <div class="product-table__wrapper">
        <table class="product-table__table">
          <thead class="product-table__head">
            <tr>
              <th class="product-table__header">Thumbnail</th>
              {displayProperties.map((prop) => (
                <th class="product-table__header">{formatPropertyName(prop)}</th>
              ))}
              <th class="product-table__header">Details</th>
            </tr>
          </thead>
          <tbody class="product-table__body" id="product-table-body">
            {
              initialModels.map((model) => (
                <tr class="product-table__row">
                  <td class="product-table__cell product-table__cell--thumbnail">
                    <img 
                      src={model.image} 
                      alt={model.model} 
                      class="product-thumbnail" 
                      width="60" 
                      height="40" 
                      loading="lazy"
                    />
                  </td>
                  {displayProperties.map((prop) => (
                    <td class="product-table__cell">{model[prop]}</td>
                  ))}
                  <td class="product-table__cell product-table__cell--action">
                    <a href={`/products/${model.id}`} class="product-table__link">View</a>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
      
      <div class="product-table__pagination" id="pagination-controls">
        <button class="pagination-button" id="prev-page" aria-label="Previous page" disabled>
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </button>
        
        <div class="pagination-info">
          <span id="current-page">1</span> / <span id="total-pages">{totalPages}</span>
        </div>
        
        <button class="pagination-button" id="next-page" aria-label="Next page" disabled={totalPages <= 1}>
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </button>
      </div>
      
      <div class="product-table__footer">
        <a href="/products" class="product-table__view-all">
          View all products
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="5" y1="12" x2="19" y2="12"></line>
            <polyline points="12 5 19 12 12 19"></polyline>
          </svg>
        </a>
      </div>
      
      <script is:inline define:vars={{ allDisplayedModels, itemsPerPage, totalPages, displayProperties }}>
        // Store all models data for client-side pagination
        const allModels = {
          allDisplayedModels: allDisplayedModels,
          itemsPerPage: itemsPerPage,
          currentPage: 1,
          totalPages: totalPages
        };
        
        // Get DOM elements
        const tableBody = document.getElementById('product-table-body');
        const currentPageEl = document.getElementById('current-page');
        const totalPagesEl = document.getElementById('total-pages');
        const prevButton = document.getElementById('prev-page');
        const nextButton = document.getElementById('next-page');
        
        // Update pagination UI
        function updatePaginationControls() {
          currentPageEl.textContent = allModels.currentPage;
          totalPagesEl.textContent = allModels.totalPages;
          prevButton.disabled = allModels.currentPage <= 1;
          nextButton.disabled = allModels.currentPage >= allModels.totalPages;
        }
        
        // Store the initial HTML structure as a template
        let rowTemplate;
        
        // Function to initialize the template from the first rendered row
        function initializeTemplate() {
          if (!tableBody.querySelector('.product-table__row')) {
            return false;
          }
          
          // Get the first row as a template
          const firstRow = tableBody.querySelector('.product-table__row').cloneNode(true);
          
          // Clear the content but keep the structure
          const cells = firstRow.querySelectorAll('.product-table__cell');
          const thumbnailCell = firstRow.querySelector('.product-table__cell--thumbnail img');
          const actionCell = firstRow.querySelector('.product-table__link');
          
          if (thumbnailCell) {
            thumbnailCell.src = '';
            thumbnailCell.alt = '';
          }
          
          cells.forEach(cell => {
            if (!cell.classList.contains('product-table__cell--thumbnail') && 
                !cell.classList.contains('product-table__cell--action')) {
              cell.textContent = '';
            }
          });
          
          if (actionCell) {
            actionCell.href = '';
          }
          
          rowTemplate = firstRow;
          return true;
        }
        
        // Render models for the current page
        function renderCurrentPage() {
          const startIdx = (allModels.currentPage - 1) * allModels.itemsPerPage;
          const endIdx = startIdx + allModels.itemsPerPage;
          const currentPageModels = allModels.allDisplayedModels.slice(startIdx, endIdx);
          
          // Initialize template if not already done
          if (!rowTemplate) {
            if (!initializeTemplate()) {
              // Fallback rendering if template initialization fails
              fallbackRender(currentPageModels);
              return;
            }
          }
          
          // Clear table body
          tableBody.innerHTML = '';
          
          // Add rows for the current page using the template
          currentPageModels.forEach(model => {
            // Clone the template row
            const row = rowTemplate.cloneNode(true);
            
            // Update the thumbnail
            const thumbnailImg = row.querySelector('.product-table__cell--thumbnail img');
            if (thumbnailImg) {
              thumbnailImg.src = model.image;
              thumbnailImg.alt = model.model;
            }
            
            // Update the property cells
            const propertyCells = row.querySelectorAll('.product-table__cell');
            let cellIndex = 0;
            propertyCells.forEach(cell => {
              if (!cell.classList.contains('product-table__cell--thumbnail') && 
                  !cell.classList.contains('product-table__cell--action')) {
                const prop = displayProperties[cellIndex];
                cell.textContent = model[prop];
                cellIndex++;
              }
            });
            
            // Update the action link
            const actionLink = row.querySelector('.product-table__link');
            if (actionLink) {
              actionLink.href = `/products/${model.id}`;
            }
            
            tableBody.appendChild(row);
          });
        }
        
        // Fallback rendering method if template approach fails
        function fallbackRender(models) {
          // Clear table body
          tableBody.innerHTML = '';
          
          // Add rows for the current page
          models.forEach(model => {
            const row = document.createElement('tr');
            row.className = 'product-table__row';
            
            // Thumbnail cell
            const thumbnailCell = document.createElement('td');
            thumbnailCell.className = 'product-table__cell product-table__cell--thumbnail';
            thumbnailCell.innerHTML = `
              <img 
                src="${model.image}" 
                alt="${model.model}" 
                class="product-thumbnail" 
                width="60" 
                height="40" 
                loading="lazy"
              />
            `;
            row.appendChild(thumbnailCell);
            
            // Property cells
            displayProperties.forEach(prop => {
              const cell = document.createElement('td');
              cell.className = 'product-table__cell';
              cell.textContent = model[prop];
              row.appendChild(cell);
            });
            
            // Action cell
            const actionCell = document.createElement('td');
            actionCell.className = 'product-table__cell product-table__cell--action';
            actionCell.innerHTML = `
              <a href="/products/${model.id}" class="product-table__link">View</a>
            `;
            row.appendChild(actionCell);
            
            tableBody.appendChild(row);
          });
        }
        
        // Go to previous page
        function goToPrevPage() {
          if (allModels.currentPage > 1) {
            allModels.currentPage--;
            renderCurrentPage();
            updatePaginationControls();
          }
        }
        
        // Go to next page
        function goToNextPage() {
          if (allModels.currentPage < allModels.totalPages) {
            allModels.currentPage++;
            renderCurrentPage();
            updatePaginationControls();
          }
        }
        
        // Add event listeners
        prevButton.addEventListener('click', goToPrevPage);
        nextButton.addEventListener('click', goToNextPage);
        
        // Initialize pagination
        updatePaginationControls();
      </script>
    </div>
  </div>
</section>

<style lang="scss">
  .product-table {
    width: 100%;
    margin: var(--spacing-lg) 0;

    &__title {
      font-size: var(--font-size-h2);
      color: var(--color-text-primary);
      margin-bottom: var(--spacing-sm);
      text-align: center;
    }

    &__description {
      font-size: var(--font-size-body-regular);
      text-align: center;
      max-width: 700px;
      margin: 0 auto var(--spacing-lg) auto;
    }

    &__wrapper {
      width: 100%;
      overflow-x: auto;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      margin-bottom: var(--spacing-lg);
    }

    &__table {
      width: 100%;
      border-collapse: collapse;
      min-width: 800px;
    }

    &__head {
      background-color: var(--color-accent-primary);
    }

    &__header {
      padding: var(--spacing-md);
      text-align: left;
      color: white;
      font-weight: 500;
      white-space: nowrap;
      
      &:first-child {
        border-top-left-radius: 8px;
      }
      
      &:last-child {
        border-top-right-radius: 8px;
      }
    }

    &__body {
      background-color: var(--color-surface);
    }

    &__row {
      border-bottom: 1px solid var(--color-border);
      
      &:last-child {
        border-bottom: none;
      }
      
      &:hover {
        background-color: rgba(var(--color-accent-primary-rgb), 0.05);
      }
    }

    &__cell {
      padding: var(--spacing-md);
      
      &--action {
        text-align: center;
      }
      
      &--thumbnail {
        padding: var(--spacing-xs);
        text-align: center;
        width: 80px;
      }
    }
    
    .product-thumbnail {
      border-radius: 4px;
      object-fit: contain;
      max-width: 100%;
      height: auto;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: transform 0.2s ease;
      
      &:hover {
        transform: scale(1.05);
      }
    }

    &__link {
      display: inline-block;
      padding: var(--spacing-xs) var(--spacing-md);
      background-color: var(--color-accent-secondary);
      color: white;
      text-decoration: none;
      border-radius: 4px;
      font-weight: 500;
      transition: background-color 0.2s ease-in-out;
      
      &:hover {
        background-color: darken(#ffa726, 10%);
      }
    }

    &__footer {
      display: flex;
      justify-content: center;
      margin-top: var(--spacing-lg);
    }

    &__view-all {
      display: flex;
      align-items: center;
      gap: var(--spacing-xs);
      color: var(--color-accent-primary);
      text-decoration: none;
      font-weight: 500;
      transition: color 0.2s ease-in-out;
      
      svg {
        transition: transform 0.2s ease-in-out;
      }
      
      &:hover svg {
        transform: translateX(3px);
      }
    }
  }

  /* Pagination styles */
  .product-table__pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-md);
    margin: var(--spacing-md) 0;
  }

  .pagination-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border: 1px solid var(--color-border);
    background-color: var(--color-surface);
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover:not(:disabled) {
      background-color: var(--color-accent-primary);
      border-color: var(--color-accent-primary);
      color: white;
    }
    
    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
  }

  .pagination-info {
    font-size: var(--font-size-body-regular);
    color: var(--color-text-primary);
    font-weight: 500;
  }

  @media (max-width: $breakpoint-sm) {
    .product-table {
      &__title {
        font-size: var(--font-size-h3);
      }
      
      &__description {
        font-size: var(--font-size-body-regular);
      }
    }
  }
</style>
