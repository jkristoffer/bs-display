---
// Import quiz data from JSON file
import quizData from './quizdata.json';

// Define interfaces for TypeScript type checking
interface QuizOption {
  label: string;
  value: string;
}

interface QuizQuestion {
  id: string;
  question: string;
  type: 'single' | 'multi';
  maxSelections?: number;
  options: QuizOption[];
}

interface ResultRecommendation {
  display: string;
  touch: string;
  features: string[];
  camera: string;
}

interface ResultType {
  title: string;
  description: string;
  recommendation: ResultRecommendation;
  cta: string[];
}

// Extract data from imported JSON
const quizTitle = quizData.title || 'Find Your Ideal Smartboard Setup';
const quizDescription = 'Not sure which smartboard is right for you? Answer a few questions and we\'ll match you with the best option.';
const startButtonText = 'Start Quiz';
const questions = quizData.questions || [];
const resultTypes = quizData.results || {};

// For passing data to client-side script
const serializedQuestions = JSON.stringify(questions);
const serializedResults = JSON.stringify(resultTypes);
---

<!-- Hidden element to store quiz data for client-side JS -->
<div id="quiz-data" data-questions={serializedQuestions} data-results={serializedResults}></div>

<div class="quiz-container">
  <section id="intro-screen" class="quiz-section active">
    <h2>{quizTitle}</h2>
    <p>{quizDescription}</p>
    <button id="start-quiz-btn" class="cta-button">{startButtonText}</button>
  </section>

  <!-- Question Sections -->
  {
    questions.map((question, index) => (
      <section
        id={question.id}
        class="quiz-section quiz-question-section"
        data-question-index={index}
        data-question-type={question.type}
        data-max-selections={question.maxSelections || 1}
      >
        <h3>Question {index + 1}</h3>
        <p>{question.question}</p>
        <div class="options-container">
          {question.options.map((option) => (
            <button class="option-button" data-value={option.value}>
              {option.label}
            </button>
          ))}
        </div>
        {question.type === 'multi' && (
          <div class="selection-info">
            <p class="selection-hint">Select up to {question.maxSelections} options</p>
          </div>
        )}
        <button class="next-question-btn" style="display: none;">
          Next Question
        </button>
      </section>
    ))
  }

  <!-- Result Page -->
  <section id="result-screen" class="quiz-section">
    <h3>Your Recommended Smartboard Setup</h3>
    <div id="result-content">
      <!-- Results will be injected here by script -->
    </div>
    <div class="result-ctas">
      <!-- CTA buttons will be generated dynamically -->
    </div>
    <button id="restart-quiz-btn" class="cta-button">Start Over</button>
  </section>
</div>

<style>
  .quiz-container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 2rem;
    border: 1px solid #eee;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .quiz-section {
    display: none; /* Hidden by default */
    text-align: center;
  }

  .quiz-section.active {
    display: block;
  }

  h2 {
    font-size: 1.8em;
    margin-bottom: 1rem;
    color: #333;
  }

  h3 {
    font-size: 1.5em;
    margin-bottom: 0.75rem;
    color: #444;
  }

  p {
    font-size: 1.1em;
    margin-bottom: 1.5rem;
    color: #555;
    line-height: 1.6;
  }

  .cta-button {
    background-color: #007bff;
    color: white;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    font-size: 1em;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .cta-button:hover {
    background-color: #0056b3;
  }

  .options-container {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin: 1.5rem 0;
  }

  .option-button {
    background-color: #f0f0f0;
    color: #333;
    padding: 0.75rem 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 1em;
    cursor: pointer;
    text-align: left;
    transition:
      background-color 0.3s ease,
      border-color 0.3s ease;
  }

  .option-button:hover {
    background-color: #e0e0e0;
    border-color: #bbb;
  }

  .option-button.selected {
    background-color: #cceeff;
    border-color: #007bff;
    font-weight: bold;
  }

  .next-question-btn {
    background-color: #28a745;
    color: white;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    font-size: 1em;
    cursor: pointer;
    margin-top: 1rem;
    transition: background-color 0.3s ease;
  }

  .next-question-btn:hover {
    background-color: #218838;
  }

  /* Quiz selection styles */
  .selection-info {
    font-size: 0.9em;
    color: #666;
    margin: 0.5rem 0;
  }
  
  .selection-hint {
    font-style: italic;
  }

  /* Results styling */
  #result-content {
    margin: 2rem 0;
    text-align: left;
  }

  .result-header {
    margin-bottom: 1.5rem;
  }

  .recommendation-details {
    background-color: #f5f5f5;
    padding: 1.5rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
  }

  .recommendation-details ul {
    list-style-type: none;
    padding-left: 0;
    margin-top: 0.5rem;
  }

  .recommendation-details li {
    padding: 0.5rem 0;
    border-bottom: 1px solid #eee;
  }

  .result-ctas {
    margin-top: 2rem;
    margin-bottom: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  @media (min-width: 600px) {
    .result-ctas {
      flex-direction: row;
      justify-content: center;
    }
  }
</style>

<script is:inline>
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Quiz initialization (DOMContentLoaded)');
    initQuiz();
  });

  // Also listen for Astro's page load event
  document.addEventListener('astro:page-load', function() {
    console.log('Quiz initialization (astro:page-load)');
    initQuiz();
  });

  // Track initialization to avoid duplicates
  let quizInitialized = false;

  function initQuiz() {
    if (quizInitialized) {
      console.log('Quiz already initialized');
      return;
    }
    
    quizInitialized = true;
    console.log('Initializing quiz...');

    // Load quiz data
    const quizDataElement = document.getElementById('quiz-data');
    if (!quizDataElement) {
      console.error('Quiz data element not found');
      return;
    }

    // Parse question and result data
    const questions = JSON.parse(quizDataElement.getAttribute('data-questions') || '[]');
    const resultTypes = JSON.parse(quizDataElement.getAttribute('data-results') || '{}');
    
    console.log(`Loaded ${questions.length} questions`);
    
    // DOM elements
    const introScreen = document.getElementById('intro-screen');
    const startButton = document.getElementById('start-quiz-btn');
    const resultScreen = document.getElementById('result-screen');
    const restartButton = document.getElementById('restart-quiz-btn');
    const allSections = document.querySelectorAll('.quiz-section');
    
    // State management
    const userAnswers = {};
    
    // Event handlers setup
    if (startButton) {
      startButton.addEventListener('click', function() {
        console.log('Start button clicked');
        if (questions.length > 0) {
          showSection(questions[0].id);
        } else {
          console.error('No questions to show');
        }
      });
    }
    
    if (restartButton) {
      restartButton.addEventListener('click', function() {
        // Clear answers
        Object.keys(userAnswers).forEach(key => delete userAnswers[key]);
        // Return to intro
        showSection('intro-screen');
      });
    }
    
    // Set up each question section
    document.querySelectorAll('.quiz-question-section').forEach(function(section) {
      const questionId = section.id;
      const questionType = section.getAttribute('data-question-type');
      const maxSelections = parseInt(section.getAttribute('data-max-selections') || '1');
      const optionButtons = section.querySelectorAll('.option-button');
      const nextButton = section.querySelector('.next-question-btn');
      
      // Option button click handlers
      optionButtons.forEach(function(button) {
        button.addEventListener('click', function() {
          if (questionType === 'single') {
            // Single-select behavior
            optionButtons.forEach(btn => btn.classList.remove('selected'));
            button.classList.add('selected');
            userAnswers[questionId] = button.getAttribute('data-value');
            
            if (nextButton) nextButton.style.display = 'inline-block';
          } else if (questionType === 'multi') {
            // Multi-select behavior
            if (button.classList.contains('selected')) {
              // Deselect
              button.classList.remove('selected');
              
              // Update answers array
              if (Array.isArray(userAnswers[questionId])) {
                const value = button.getAttribute('data-value');
                userAnswers[questionId] = userAnswers[questionId].filter(v => v !== value);
              }
            } else {
              // Check if max selections reached
              const selectedCount = section.querySelectorAll('.option-button.selected').length;
              
              if (selectedCount < maxSelections) {
                // Select new option
                button.classList.add('selected');
                
                // Initialize array if needed
                if (!Array.isArray(userAnswers[questionId])) {
                  userAnswers[questionId] = [];
                }
                
                // Add to answers
                userAnswers[questionId].push(button.getAttribute('data-value'));
              } else {
                alert(`You can only select up to ${maxSelections} options`);
                return;
              }
            }
            
            // Show/hide next button
            if (nextButton) {
              const hasSelections = section.querySelectorAll('.option-button.selected').length > 0;
              nextButton.style.display = hasSelections ? 'inline-block' : 'none';
            }
          }
        });
      });
      
      // Next button click handler
      if (nextButton) {
        nextButton.addEventListener('click', function() {
          // Ensure we have an answer
          if (!userAnswers[questionId]) return;
          
          // Find next question
          const currentIndex = questions.findIndex(q => q.id === questionId);
          const nextIndex = currentIndex + 1;
          
          if (nextIndex < questions.length) {
            // Go to next question
            showSection(questions[nextIndex].id);
          } else {
            // Show results
            calculateAndShowResults();
            showSection('result-screen');
          }
        });
      }
    });
    
    // Helper function to show a section and hide others
    function showSection(sectionId) {
      console.log('Showing section:', sectionId);
      
      // Hide all sections
      document.querySelectorAll('.quiz-section').forEach(function(section) {
        section.classList.remove('active');
      });
      
      // Show target section
      const sectionToShow = document.getElementById(sectionId);
      if (sectionToShow) {
        sectionToShow.classList.add('active');
      } else {
        console.error('Section not found:', sectionId);
      }
    }
    
    // Calculate and display the results
    function calculateAndShowResults() {
      console.log('Calculating results with answers:', userAnswers);
      
      // Get result containers
      const resultContent = document.getElementById('result-content');
      const ctaContainer = document.querySelector('.result-ctas');
      
      if (!resultContent || !ctaContainer) {
        console.error('Result containers not found');
        return;
      }
      
      // Clear previous content
      resultContent.innerHTML = '';
      ctaContainer.innerHTML = '';
      
      // Count category occurrences
      const categoryCounts = {
        education: 0,
        corporate: 0,
        creative: 0,
        general: 0
      };
      
      // Process all answers (both single and multi-select)
      Object.entries(userAnswers).forEach(([questionId, answer]) => {
        if (Array.isArray(answer)) {
          // Multi-select answers
          answer.forEach(value => {
            if (categoryCounts[value] !== undefined) {
              categoryCounts[value]++;
            }
          });
        } else if (typeof answer === 'string') {
          // Single-select answers
          if (categoryCounts[answer] !== undefined) {
            categoryCounts[answer]++;
          }
        }
      });
      
      console.log('Category counts:', categoryCounts);
      
      // Find the top category
      let topCategory = 'general'; // Default
      let topCount = 0;
      
      Object.entries(categoryCounts).forEach(([category, count]) => {
        if (count > topCount) {
          topCount = count;
          topCategory = category;
        }
      });
      
      console.log('Top category:', topCategory);
      
      // Get result data
      const resultData = resultTypes[topCategory];
      
      if (!resultData) {
        resultContent.innerHTML = "<p>We couldn't determine the best setup for your needs. Please try again or contact us for assistance.</p>";
        return;
      }
      
      // Build result HTML
      resultContent.innerHTML = `
        <div class="result-header">
          <h4>${resultData.title}</h4>
          <p>${resultData.description}</p>
        </div>
        <div class="recommendation-details">
          <h5>Recommended Setup:</h5>
          <ul>
            <li><strong>Display:</strong> ${resultData.recommendation.display}</li>
            <li><strong>Touch Technology:</strong> ${resultData.recommendation.touch}</li>
            <li><strong>Camera:</strong> ${resultData.recommendation.camera}</li>
            <li><strong>Key Features:</strong> ${resultData.recommendation.features.join(', ')}</li>
          </ul>
        </div>
      `;
      
      // Create CTA buttons
      resultData.cta.forEach(ctaText => {
        const button = document.createElement('button');
        button.className = 'cta-button';
        button.textContent = ctaText;
        
        // Set up navigation based on button text
        button.addEventListener('click', () => {
          if (ctaText.toLowerCase().includes('model')) {
            window.location.href = '/products';
          } else if (ctaText.toLowerCase().includes('demo')) {
            window.location.href = '/contact?subject=DemoRequest';
          } else if (ctaText.toLowerCase().includes('quote') || ctaText.toLowerCase().includes('pricing')) {
            window.location.href = '/contact?subject=QuoteRequest';
          } else {
            window.location.href = '/contact';
          }
        });
        
        ctaContainer.appendChild(button);
      });
    }
  }
</script>
