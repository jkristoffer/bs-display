---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import PageHeader from '../../components/common/page-header/index.astro';
import type { CollectionEntry } from 'astro:content';

// Get all blog posts and sort by publish date (newest first)
const allBlogPosts = await getCollection('blog');
const sortedPosts = allBlogPosts.sort(
  (a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime()
);

// Pagination configuration
export const prerender = true; // Enable static site generation for SEO
const postsPerPage = 6;
const totalPosts = sortedPosts.length;
const totalPages = Math.ceil(totalPosts / postsPerPage);

// Get the current page from the URL or default to 1
const pageParams = Astro.url.searchParams.get('page') || '1';
const currentPage = parseInt(pageParams);

// Calculate pagination data
const startIndex = (currentPage - 1) * postsPerPage;
const endIndex = startIndex + postsPerPage;
const currentPosts: CollectionEntry<'blog'>[] = sortedPosts.slice(
  startIndex,
  endIndex
);
const hasNextPage = currentPage < totalPages;
const hasPrevPage = currentPage > 1;

// Generate URLs for pagination
const nextPageUrl = hasNextPage ? `/blog?page=${currentPage + 1}` : null;
const prevPageUrl = hasPrevPage ? `/blog?page=${currentPage - 1}` : null;

// Format date function
function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
}
---

<MainLayout
  title="Blog | Big Shine Display"
  description="Explore the latest insights, guides, and industry news about smart displays, interactive whiteboards, and digital signage solutions."
>
  {/* Add prev/next links for SEO and accessibility */}
  {prevPageUrl && <link rel="prev" href={prevPageUrl} />}
  {nextPageUrl && <link rel="next" href={nextPageUrl} />}
  <PageHeader
    title="Display Technology Blog"
    subtitle="Insights, guides, and industry news about smart display technologies"
  />
  
  <div class="blog-index-container">

    <div class="blog-posts-grid" id="blog-posts-container">
      {
        currentPosts.map((post) => (
          <article class="blog-card">
            {post.data.image && (
              <div class="blog-card-image">
                <img
                  src={post.data.image}
                  alt={post.data.title}
                  loading="lazy"
                />
              </div>
            )}
            <div class="blog-card-content">
              <div class="blog-card-header">
                {post.data.category && (
                  <span class="blog-category">{post.data.category}</span>
                )}
                {post.data.publishDate && (
                  <time datetime={post.data.publishDate.toISOString()} class="blog-date">
                    {formatDate(post.data.publishDate)}
                  </time>
                )}
              </div>
              
              <h2>
                <a href={`/blog/${post.id}`}>{post.data.title}</a>
              </h2>
              
              <p class="blog-excerpt">{post.data.description}</p>
              
              <div class="blog-card-footer">
                <div class="blog-meta">
                  {post.data.author && (
                    <div class="blog-author">
                      <span class="author-avatar"></span>
                      <span>By {post.data.author}</span>
                    </div>
                  )}
                </div>
                
                <a href={`/blog/${post.id}`} class="read-more-link">
                  Read more <span class="read-more-arrow">â†’</span>
                </a>
              </div>
            </div>
          </article>
        ))
      }
    </div>

    <div class="pagination-container">
      {/* Server-side pagination controls */}
      <div class="pagination-links">
        {
          hasPrevPage && (
            <a href={prevPageUrl} class="pagination-link" rel="prev">
              &larr; Previous
            </a>
          )
        }

        <span class="pagination-info">Page {currentPage} of {totalPages}</span>

        {
          hasNextPage && (
            <a href={nextPageUrl} class="pagination-link" rel="next">
              Next &rarr;
            </a>
          )
        }
      </div>

      {/* Client-side load more button */}
      {
        hasNextPage && (
          <button
            id="load-more-btn"
            class="load-more-button"
            data-next-page={currentPage + 1}
            data-total-pages={totalPages}
          >
            Load More
          </button>
        )
      }
    </div>
  </div>

  <script>
    // Client-side JavaScript for the "Load More" functionality
    document.addEventListener('DOMContentLoaded', () => {
      const loadMoreBtn = document.getElementById(
        'load-more-btn'
      ) as HTMLButtonElement;
      const postsContainer = document.getElementById('blog-posts-container');

      if (loadMoreBtn && postsContainer) {
        loadMoreBtn.addEventListener('click', async () => {
          // Get the next page number from the button's data attribute

          const nextPage = loadMoreBtn.getAttribute('data-next-page') || '1';
          const totalPages =
            loadMoreBtn.getAttribute('data-total-pages') || '1';

          // Show loading state
          loadMoreBtn.textContent = 'Loading...';
          loadMoreBtn.disabled = true;

          try {
            // Fetch the next page
            const response = await fetch(`/api/blog-posts?page=${nextPage}`);

            if (!response.ok) {
              throw new Error('Failed to load more posts');
            }

            const data = await response.json();

            // Append the new posts to the container
            if (data.posts && data.posts.length > 0) {
              // Create HTML for each post and append to the container
              data.posts.forEach((post) => {
                const postElement = createPostElement(post);
                postsContainer.appendChild(postElement);
              });

              // Update the button's next page number
              loadMoreBtn.setAttribute('data-next-page', String(nextPage + 1));

              // Hide the button if we've reached the last page
              if (nextPage + 1 > totalPages) {
                loadMoreBtn.style.display = 'none';
              }
            }
          } catch (error) {
            console.error('Error loading more posts:', error);
          } finally {
            // Reset button state
            loadMoreBtn.textContent = 'Load More';
            loadMoreBtn.disabled = false;
          }
        });
      }
    });

    // Helper function to create a post element from post data
    function createPostElement(post) {
      const article = document.createElement('article');
      article.className = 'blog-card';

      let html = '';

      // Add image if available
      if (post.image) {
        html += `
        <div class="blog-card-image">
          <img src="${post.image}" alt="${post.title}" loading="lazy" />
        </div>
      `;
      }

      // Add content
      html += `
      <div class="blog-card-content">
        ${post.category ? `<span class="blog-category">${post.category}</span>` : ''}
        <h2>
          <a href="/blog/${post.slug}">${post.title}</a>
        </h2>
        <p class="blog-excerpt">${post.description}</p>
        <div class="blog-meta">
          ${post.publishDate ? `<time datetime="${post.publishDate}">${formatDate(new Date(post.publishDate))}</time>` : ''}
          ${post.author ? `<span class="blog-author">By ${post.author}</span>` : ''}
        </div>
      </div>
    `;

      article.innerHTML = html;
      return article;
    }

    // Format date function for client-side use
    function formatDate(date: Date): string {
      return new Intl.DateTimeFormat('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }).format(date);
    }
  </script>

  <style>
    /* Hero Banner Styles */
    .blog-hero-banner {
      background: linear-gradient(135deg, rgba(var(--color-accent-primary-rgb), 0.9) 0%, rgba(var(--color-accent-primary-rgb), 0.7) 100%), url('/images/blog-hero.jpg') no-repeat center center;
      background-size: cover;
      width: 100%;
      padding: var(--spacing-xxl) 0;
      text-align: center;
      color: var(--color-background);
      margin-bottom: var(--spacing-xl);
    }

    .blog-hero-content {
      max-width: 800px;
      margin: 0 auto;
      padding: 0 var(--spacing-md);
    }

    .blog-hero-banner h1 {
      font-size: var(--font-size-h1);
      margin-bottom: var(--spacing-md);
      font-weight: var(--font-weight-bold);
    }

    .blog-hero-banner p {
      font-size: var(--font-size-body-large);
      margin-bottom: 0;
      opacity: 0.9;
    }

    @media (max-width: var(--breakpoint-md)) {
      .blog-hero-banner {
        padding: var(--spacing-xl) 0;
      }
      
      .blog-hero-banner h1 {
        font-size: calc(var(--font-size-h1) * 0.8);
      }
    }

    /* Blog Container Styles */
    .blog-index-container {
      max-width: var(--spacing-container-max-width);
      margin: 0 auto;
      padding: var(--spacing-lg) var(--spacing-md);
    }

    /* Blog header styles removed as replaced by hero banner */

    .blog-posts-grid {
      display: grid;
      grid-template-columns: repeat(1, 1fr);
      gap: var(--spacing-lg);
    }

    @media (min-width: var(--breakpoint-md)) {
      .blog-posts-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @media (min-width: var(--breakpoint-lg)) {
      .blog-posts-grid {
        grid-template-columns: repeat(3, 1fr);
      }
    }

    .blog-card {
      border-radius: 8px;
      overflow: hidden;
      box-shadow: var(--box-shadow-1);
      transition: all 0.3s ease;
      background-color: var(--color-surface);
      display: flex;
      flex-direction: column;
      height: 100%;
      position: relative;
    }

    .blog-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 15px rgba(33, 33, 33, 0.2);
    }
    
    .blog-card:before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: linear-gradient(90deg, var(--color-accent-primary), var(--color-accent-secondary));
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .blog-card:hover:before {
      opacity: 1;
    }

    .blog-card-image {
      height: 200px;
      overflow: hidden;
      position: relative;
    }

    .blog-card-image:after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 30%;
      background: linear-gradient(to top, rgba(0,0,0,0.3), transparent);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .blog-card:hover .blog-card-image:after {
      opacity: 1;
    }

    .blog-card-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.5s ease;
    }
    
    .blog-card:hover .blog-card-image img {
      transform: scale(1.05);
    }

    .blog-card-content {
      padding: var(--spacing-md);
      display: flex;
      flex-direction: column;
      flex-grow: 1;
      height: 100%;
    }

    .blog-category {
      display: inline-block;
      background-color: rgba(var(--color-accent-primary-rgb), 0.1);
      color: var(--color-accent-primary);
      padding: var(--spacing-xs) var(--spacing-sm);
      border-radius: 1rem;
      font-size: var(--font-size-smaller);
      font-weight: var(--font-weight-bold);
      margin-bottom: var(--spacing-sm);
    }

    .blog-card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--spacing-sm);
    }

    .blog-card h2 {
      font-size: var(--font-size-h3);
      margin-bottom: var(--spacing-sm);
      line-height: var(--line-height-headers);
      transition: color 0.3s ease;
    }

    .blog-card h2 a {
      color: var(--color-text-primary);
      text-decoration: none;
    }

    .blog-card h2 a:hover {
      color: var(--color-accent-primary);
    }

    .blog-excerpt {
      color: var(--color-text-primary);
      opacity: 0.8;
      margin-bottom: var(--spacing-md);
      font-size: var(--font-size-body-regular);
      line-height: var(--line-height-default);
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .blog-card-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: auto;
      padding-top: var(--spacing-sm);
      border-top: 1px solid rgba(var(--color-accent-primary-rgb), 0.1);
    }
    
    .blog-meta {
      display: flex;
      align-items: center;
      gap: var(--spacing-sm);
      font-size: var(--font-size-small);
      color: var(--color-text-primary);
      opacity: 0.7;
    }
    
    .blog-date {
      font-size: var(--font-size-smaller);
      color: var(--color-text-primary);
      opacity: 0.6;
    }
    
    .blog-author {
      display: flex;
      align-items: center;
      gap: var(--spacing-xs);
    }
    
    .author-avatar {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background-color: rgba(var(--color-accent-primary-rgb), 0.2);
      display: inline-block;
    }
    
    .read-more-link {
      font-size: var(--font-size-small);
      font-weight: var(--font-weight-bold);
      color: var(--color-accent-primary);
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: var(--spacing-xs);
      transition: all 0.3s ease;
    }
    
    .read-more-link:hover {
      opacity: 0.8;
    }
    
    .read-more-arrow {
      display: inline-block;
      transition: transform 0.3s ease;
    }
    
    .read-more-link:hover .read-more-arrow {
      transform: translateX(4px);
    }

    /* Pagination styles */
    .pagination-container {
      margin-top: var(--spacing-xl);
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: var(--spacing-lg);
    }

    .pagination-links {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .pagination-link {
      padding: var(--spacing-xs) var(--spacing-md);
      border-radius: 4px;
      background-color: var(--color-surface);
      color: var(--color-text-primary);
      border: 1px solid var(--color-border);
      text-decoration: none;
      font-weight: var(--font-weight-bold);
      transition: all 0.3s ease;
    }

    .pagination-link:hover {
      background-color: rgba(var(--color-accent-primary-rgb), 0.1);
      border-color: var(--color-accent-primary);
      color: var(--color-accent-primary);
    }

    .pagination-info {
      color: #666;
    }

    .load-more-button {
      padding: 12px 24px;
      background-color: var(--color-button-primary-background);
      color: var(--color-button-primary-text);
      border: none;
      border-radius: 4px;
      font-weight: var(--font-weight-bold);
      text-transform: uppercase;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .load-more-button:hover {
      background-color: #fb8c00;
    }

    .load-more-button:disabled {
      background-color: var(--color-button-disabled-border);
      color: var(--color-button-disabled-text);
      cursor: not-allowed;
    }
  </style>
</MainLayout>
