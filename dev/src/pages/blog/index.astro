---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import PageHeaderModern from '../../components/common/PageHeaderModern.astro';
import type { CollectionEntry } from 'astro:content';

// Get all blog posts and sort by publish date (newest first)
const allBlogPosts = await getCollection('blog');
const sortedPosts = allBlogPosts.sort(
  (a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime()
);

// Pagination configuration
export const prerender = true; // Enable static site generation for SEO
const postsPerPage = 6;
const totalPosts = sortedPosts.length;
const totalPages = Math.ceil(totalPosts / postsPerPage);

// Get the current page from the URL or default to 1
const pageParams = Astro.url.searchParams.get('page') || '1';
const currentPage = parseInt(pageParams);

// Calculate pagination data
const startIndex = (currentPage - 1) * postsPerPage;
const endIndex = startIndex + postsPerPage;
const currentPosts: CollectionEntry<'blog'>[] = sortedPosts.slice(
  startIndex,
  endIndex
);
const hasNextPage = currentPage < totalPages;
const hasPrevPage = currentPage > 1;

// Generate URLs for pagination
const nextPageUrl = hasNextPage ? `/blog?page=${currentPage + 1}` : null;
const prevPageUrl = hasPrevPage ? `/blog?page=${currentPage - 1}` : null;

// Format date function
function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
}
---

<MainLayout
  title="Blog | Big Shine Display"
  description="Explore the latest insights, guides, and industry news about smart displays, interactive whiteboards, and digital signage solutions."
>
  {/* Add prev/next links for SEO and accessibility */}
  {prevPageUrl && <link rel="prev" href={prevPageUrl} />}
  {nextPageUrl && <link rel="next" href={nextPageUrl} />}
  
  <PageHeaderModern
    title="Display Technology Blog"
    subtitle="Insights, guides, and industry news about smart display technologies"
    badge="Latest Articles"
    badgeIcon="ðŸ“š"
    theme="blue"
  />
  

  <section class="blog-listing-modern">
    <div class="blog-container">
      <!-- Featured Article (First Post) -->
      {currentPosts.length > 0 && (
        <article class="featured-blog-card animate-fade-up">
          <div class="featured-visual">
            <div class="featured-image">
              <img
                src={currentPosts[0].data.image || '/assets/default-blog-featured.jpg'}
                alt={currentPosts[0].data.title}
                loading="lazy"
                onerror="this.onerror=null; this.src='/assets/abstract-bg-1.jpeg'"
              />
              <div class="image-overlay"></div>
            </div>
            
            <!-- Floating Stats -->
            <div class="floating-stats">
              <div class="stat-card">
                <div class="stat-icon">ðŸ“–</div>
                <div class="stat-content">
                  <div class="stat-number">5min</div>
                  <div class="stat-label">Read</div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="featured-content">
            <div class="featured-meta">
              {currentPosts[0].data.category && (
                <span class="category-tag featured-category">
                  {currentPosts[0].data.category}
                </span>
              )}
              <time datetime={currentPosts[0].data.publishDate.toISOString()} class="publish-date">
                {formatDate(currentPosts[0].data.publishDate)}
              </time>
            </div>
            
            <h1 class="featured-title">
              <a href={`/blog/${currentPosts[0].id}`}>{currentPosts[0].data.title}</a>
            </h1>
            
            <p class="featured-excerpt">{currentPosts[0].data.description}</p>
            
            <div class="featured-cta">
              <a href={`/blog/${currentPosts[0].id}`} class="button-gradient animate-float">
                Read Full Article
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </a>
            </div>
            
            {currentPosts[0].data.author && (
              <div class="featured-author">
                <div class="author-avatar"></div>
                <div class="author-info">
                  <span class="author-name">By {currentPosts[0].data.author}</span>
                  <span class="author-title">Content Specialist</span>
                </div>
              </div>
            )}
          </div>
        </article>
      )}

      <!-- Recent Articles Grid -->
      {currentPosts.length > 1 && (
        <div class="articles-section">
          <div class="articles-header animate-fade-up">
            <h2 class="articles-title">Latest Articles</h2>
            <div class="articles-count">{currentPosts.length - 1} more posts</div>
          </div>
          
          <div class="articles-grid" id="blog-posts-container">
            {currentPosts.slice(1).map((post, index) => (
              <article class="blog-card glass-light animate-fade-up" style={`animation-delay: ${index * 0.1}s`}>
                <div class="card-image">
                  <img
                    src={post.data.image || '/assets/default-blog-article.jpg'}
                    alt={post.data.title}
                    loading="lazy"
                    onerror="this.onerror=null; this.src='/assets/abstract-bg-1.jpeg'"
                  />
                  <div class="card-overlay">
                    <a href={`/blog/${post.id}`} class="overlay-link">
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                        <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                    </a>
                  </div>
                </div>
                
                <div class="card-content">
                  <div class="card-meta">
                    {post.data.category && (
                      <span class="category-tag">{post.data.category}</span>
                    )}
                    <time datetime={post.data.publishDate.toISOString()} class="card-date">
                      {formatDate(post.data.publishDate)}
                    </time>
                  </div>
                  
                  <h3 class="card-title">
                    <a href={`/blog/${post.id}`}>{post.data.title}</a>
                  </h3>
                  
                  <p class="card-excerpt">{post.data.description}</p>
                  
                  <div class="card-footer">
                    <div class="reading-time">
                      <svg width="14" height="14" viewBox="0 0 24 24" fill="none">
                        <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                        <polyline points="12 6 12 12 16 14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                      5 min read
                    </div>
                    {post.data.author && (
                      <span class="card-author">By {post.data.author}</span>
                    )}
                  </div>
                </div>
              </article>
            ))}
          </div>
        </div>
      )}
    </div>

      <!-- Modern Pagination -->
      <div class="pagination-modern animate-fade-up">
        <div class="pagination-info">
          <span class="current-page">Page {currentPage}</span>
          <span class="total-pages">of {totalPages}</span>
        </div>
        
        <div class="pagination-controls">
          {hasPrevPage && (
            <a href={prevPageUrl} class="button-glass" rel="prev">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                <path d="M19 12H5M5 12L12 19M5 12L12 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              Previous
            </a>
          )}
          
          {hasNextPage && (
            <a href={nextPageUrl} class="button-gradient" rel="next">
              Next
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </a>
          )}
        </div>
        
        {hasNextPage && (
          <button
            id="load-more-btn"
            class="button-glass load-more-enhanced"
            data-next-page={currentPage + 1}
            data-total-pages={totalPages}
          >
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
              <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2"/>
              <path d="M12 1V9M21 12H13M12 23V15M3 12H11" stroke="currentColor" stroke-width="2"/>
            </svg>
            Load More Articles
          </button>
        )}
      </div>
    </div>
  </section>

  <script>
    // TypeScript interface for blog post
    interface BlogPost {
      image?: string;
      title: string;
      category?: string;
      slug: string;
      description: string;
      publishDate?: string;
      author?: string;
    }

    // Client-side JavaScript for the "Load More" functionality
    document.addEventListener('DOMContentLoaded', () => {
      const loadMoreBtn = document.getElementById(
        'load-more-btn'
      ) as HTMLButtonElement;
      const postsContainer = document.getElementById('blog-posts-container');

      if (loadMoreBtn && postsContainer) {
        loadMoreBtn.addEventListener('click', async () => {
          // Get the next page number from the button's data attribute

          const nextPage = loadMoreBtn.getAttribute('data-next-page') || '1';
          const totalPages =
            loadMoreBtn.getAttribute('data-total-pages') || '1';

          // Show loading state
          loadMoreBtn.textContent = 'Loading...';
          loadMoreBtn.disabled = true;

          try {
            // Fetch the next page
            const response = await fetch(`/api/blog-posts?page=${nextPage}`);

            if (!response.ok) {
              throw new Error('Failed to load more posts');
            }

            const data = await response.json();

            // Append the new posts to the container
            if (data.posts && data.posts.length > 0) {
              // Create HTML for each post and append to the container
              data.posts.forEach((post: BlogPost) => {
                const postElement = createPostElement(post);
                postsContainer.appendChild(postElement);
              });

              // Update the button's next page number
              loadMoreBtn.setAttribute('data-next-page', String(nextPage + 1));

              // Hide the button if we've reached the last page
              if (nextPage + 1 > totalPages) {
                loadMoreBtn.style.display = 'none';
              }
            }
          } catch (error) {
            console.error('Error loading more posts:', error);
          } finally {
            // Reset button state
            loadMoreBtn.textContent = 'Load More';
            loadMoreBtn.disabled = false;
          }
        });
      }
    });

    // Helper function to create a post element from post data
    function createPostElement(post: BlogPost) {
      const article = document.createElement('article');
      article.className = 'blog-card glass-light animate-fade-up';

      let html = '';

      // Add image with overlay
      if (post.image) {
        html += `
        <div class="card-image">
          <img src="${post.image}" alt="${post.title}" loading="lazy" onerror="this.onerror=null; this.src='/assets/abstract-bg-1.jpeg'" />
          <div class="card-overlay">
            <a href="/blog/${post.slug}" class="overlay-link">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </a>
          </div>
        </div>
      `;
      }

      // Add content with modern styling
      html += `
      <div class="card-content">
        <div class="card-meta">
          ${post.category ? `<span class="category-tag">${post.category}</span>` : ''}
          ${post.publishDate ? `<time datetime="${post.publishDate}" class="card-date">${formatDate(new Date(post.publishDate))}</time>` : ''}
        </div>
        <h3 class="card-title">
          <a href="/blog/${post.slug}">${post.title}</a>
        </h3>
        <p class="card-excerpt">${post.description}</p>
        <div class="card-footer">
          <div class="reading-time">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none">
              <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
              <polyline points="12 6 12 12 16 14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            5 min read
          </div>
          ${post.author ? `<span class="card-author">By ${post.author}</span>` : ''}
        </div>
      </div>
    `;

      article.innerHTML = html;
      return article;
    }

    // Format date function for client-side use
    function formatDate(date: Date): string {
      return new Intl.DateTimeFormat('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }).format(date);
    }
  </script>

  <style lang="scss">


    /* Modern Blog Layout */
    .blog-listing-modern {
      position: relative;
      padding: var(--space-section) 0;
      background: linear-gradient(180deg, #ffffff 0%, #f8fafb 100%);
    }

    .blog-container {
      max-width: var(--container-default);
      margin: 0 auto;
      padding: 0 var(--space-md);
      position: relative;
      z-index: 2;
    }

    /* Featured Article */
    .featured-blog-card {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: var(--space-xl);
      align-items: center;
      margin-bottom: calc(var(--space-xl) * 2);
      background: white;
      border-radius: var(--radius-xl);
      padding: var(--space-card);
      box-shadow: var(--shadow-2xl);
      position: relative;
      overflow: hidden;
      
      &::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--gradient-primary);
      }
      
      @media (max-width: $breakpoint-lg) {
        grid-template-columns: 1fr;
        text-align: center;
      }
    }

    .featured-visual {
      position: relative;
      height: 400px;
    }

    .featured-image {
      position: relative;
      width: 100%;
      height: 350px;
      border-radius: 20px;
      overflow: hidden;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
      
      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.6s ease;
      }
      
      &:hover img {
        transform: scale(1.05);
      }
    }

    .image-overlay {
      position: absolute;
      inset: 0;
      background: linear-gradient(
        135deg,
        rgba(59, 130, 246, 0.1) 0%, 
        rgba(139, 92, 246, 0.1) 100%
      );
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .featured-image:hover .image-overlay {
      opacity: 1;
    }

    /* Floating Stats */
    .floating-stats {
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      flex-direction: column;
      gap: var(--space-sm);
    }

    .stat-card {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      padding: 12px 16px;
      background: var(--glass-bg);
      backdrop-filter: var(--glass-backdrop);
      border-radius: 12px;
      box-shadow: var(--shadow-lg);
      border: 1px solid var(--glass-border);
      animation: statFloat 3s ease-in-out infinite;
    }

    .stat-icon {
      font-size: 20px;
    }

    .stat-number {
      font-size: 16px;
      font-weight: var(--font-weight-bold);
      color: var(--color-text-primary);
      line-height: 1;
    }

    .stat-label {
      font-size: 12px;
      color: var(--color-text-secondary);
      line-height: 1;
    }

    /* Featured Content */
    .featured-content {
      display: flex;
      flex-direction: column;
      gap: var(--space-lg);
    }

    .featured-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: var(--space-sm);
    }

    .featured-category {
      background: var(--gradient-primary);
      color: white;
      padding: var(--space-xs) var(--space-md);
      border-radius: var(--radius-full);
      font-size: var(--text-body);
      font-weight: var(--font-weight-semibold);
      text-transform: uppercase;
      letter-spacing: var(0.025em);
    }

    .publish-date {
      font-size: var(--text-body);
      color: var(--color-text-secondary);
      font-weight: var(--font-weight-medium);
    }

    .featured-title {
      font-size: var(--text-section);
      font-weight: var(--font-weight-bold);
      line-height: var(--text-section-line-height);
      margin: 0;
      
      a {
        color: var(--color-text-primary);
        text-decoration: none;
        transition: all var(--duration-normal) var(--ease-smooth);
        
        &:hover {
          background: var(--gradient-primary);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }
      }
    }

    .featured-excerpt {
      font-size: var(--text-body);
      line-height: var(--text-body-line-height);
      color: var(--color-text-secondary);
      margin: 0;
    }

    .featured-cta {
      .button-gradient {
        display: inline-flex;
        align-items: center;
        gap: var(--space-sm);
        
        svg {
          width: 18px;
          height: 18px;
          transition: transform var(--duration-normal) var(--ease-smooth);
        }
        
        &:hover svg {
          transform: translateX(4px);
        }
      }
    }

    .featured-author {
      display: flex;
      align-items: center;
      gap: var(--space-md);
      padding-top: var(--space-lg);
      border-top: 1px solid var(--color-border-muted);
    }

    .author-avatar {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      background: var(--gradient-primary);
      box-shadow: var(--shadow-md);
    }

    .author-info {
      display: flex;
      flex-direction: column;
      gap: var(--space-xs);
    }

    .author-name {
      font-weight: var(--font-weight-semibold);
      color: var(--color-text-primary);
    }

    .author-title {
      font-size: var(--text-body);
      color: var(--color-text-secondary);
    }

    /* Articles Section */
    .articles-section {
      margin-bottom: calc(var(--space-xl) * 2);
    }

    .articles-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--space-xl);
      
      @media (max-width: $breakpoint-sm) {
        flex-direction: column;
        gap: var(--space-sm);
        text-align: center;
      }
    }

    .articles-title {
      font-size: var(--text-section);
      font-weight: var(--font-weight-bold);
      color: var(--color-text-primary);
      margin: 0;
    }

    .articles-count {
      font-size: var(--text-body);
      color: var(--color-text-secondary);
      background: rgba(59, 130, 246, 0.1);
      padding: 6px 12px;
      border-radius: 20px;
    }

    /* Articles Grid */
    .articles-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      gap: var(--space-lg);
    }

    .blog-card {
      background: var(--glass-bg);
      backdrop-filter: var(--glass-backdrop);
      border: 1px solid var(--glass-border);
      border-radius: 20px;
      overflow: hidden;
      box-shadow: var(--shadow-lg);
      transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
      animation: cardSlideUp 0.6s ease-out both;
      position: relative;
      
      &::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: var(--gradient-primary);
        transform: scaleX(0);
        transform-origin: left;
        transition: transform 0.3s ease;
      }
      
      &:hover {
        transform: translateY(-8px);
        box-shadow: var(--shadow-2xl);
        background: rgba(255, 255, 255, 0.15);
        
        &::before {
          transform: scaleX(1);
        }
      }
    }

    .card-image {
      position: relative;
      height: 200px;
      overflow: hidden;
      
      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.6s ease;
      }
    }

    .card-overlay {
      position: absolute;
      inset: 0;
      background: rgba(0, 0, 0, 0.6);
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .overlay-link {
      width: 48px;
      height: 48px;
      background: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #3b82f6;
      text-decoration: none;
      transform: scale(0.8);
      transition: all 0.3s ease;
      
      svg {
        width: 20px;
        height: 20px;
      }
    }

    .blog-card:hover .card-overlay {
      opacity: 1;
    }

    .blog-card:hover .overlay-link {
      transform: scale(1);
    }

    .blog-card:hover .card-image img {
      transform: scale(1.1);
    }

    .card-content {
      padding: var(--space-lg);
      display: flex;
      flex-direction: column;
      gap: var(--space-md);
    }

    .card-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: var(--text-body);
    }

    .category-tag {
      background: rgba(59, 130, 246, 0.1);
      color: #3b82f6;
      padding: var(--space-xs) var(--space-sm);
      border-radius: var(--radius-full);
      font-size: var(--text-body);
      font-weight: var(--font-weight-semibold);
      text-transform: uppercase;
      letter-spacing: var(0.025em);
    }

    .card-date {
      color: var(--color-text-secondary);
      font-size: var(--text-body);
    }

    .card-title {
      font-size: clamp(18px, 2.5vw, 22px);
      font-weight: var(--font-weight-semibold);
      line-height: 1.3;
      margin: 0;
      
      a {
        color: var(--color-text-primary);
        text-decoration: none;
        transition: color 0.3s ease;
        
        &:hover {
          color: #3b82f6;
        }
      }
    }

    .card-excerpt {
      font-size: var(--text-body);
      line-height: var(--text-body-line-height);
      color: var(--color-text-secondary);
      margin: 0;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .card-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: auto;
      padding-top: var(--space-sm);
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      font-size: var(--text-body);
    }

    .reading-time {
      display: flex;
      align-items: center;
      gap: var(--space-xs);
      color: var(--color-text-secondary);
      
      svg {
        width: 14px;
        height: 14px;
      }
    }

    .card-author {
      color: var(--color-text-secondary);
      font-size: var(--text-body);
    }

    /* Modern Pagination */
    .pagination-modern {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: var(--space-lg);
      margin-top: calc(var(--space-xl) * 2);
      padding: var(--space-lg);
      background: var(--glass-bg);
      backdrop-filter: var(--glass-backdrop);
      border-radius: var(--radius-xl);
      border: 1px solid var(--glass-border);
    }

    .pagination-info {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      font-size: var(--text-body);
      color: var(--color-text-secondary);
    }

    .current-page {
      font-weight: var(--font-weight-bold);
      color: var(--color-text-primary);
    }

    .pagination-controls {
      display: flex;
      gap: var(--space-md);
      align-items: center;
    }

    .pagination-controls .button-glass,
    .pagination-controls .button-gradient {
      display: inline-flex;
      align-items: center;
      gap: var(--space-sm);
      
      svg {
        width: 16px;
        height: 16px;
      }
    }

    .load-more-enhanced {
      display: inline-flex;
      align-items: center;
      gap: var(--space-sm);
      padding: var(--space-md) var(--space-lg);
      
      svg {
        width: 20px;
        height: 20px;
        animation: rotate 2s linear infinite;
      }
      
      &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        
        svg {
          animation-play-state: paused;
        }
      }
    }

    /* Animations */
    @keyframes glow1Float {
      0%, 100% { transform: translate(0, 0) rotate(0deg); }
      50% { transform: translate(-30px, -20px) rotate(180deg); }
    }

    @keyframes glow2Float {
      0%, 100% { transform: translate(0, 0) rotate(0deg); }
      50% { transform: translate(20px, -15px) rotate(-180deg); }
    }

    @keyframes cardSlideUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes statFloat {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-6px); }
    }

    @keyframes rotate {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }

    /* Responsive Design */
    @media (max-width: $breakpoint-lg) {
      .featured-blog-card {
        grid-template-columns: 1fr;
        text-align: center;
      }
      
      .featured-visual {
        order: -1;
      }
    }

    @media (max-width: $breakpoint-sm) {
      .pagination-controls {
        flex-direction: column;
        width: 100%;
      }
      
      .pagination-controls .button-glass,
      .pagination-controls .button-gradient {
        width: 100%;
        justify-content: center;
      }
    }

    /* Reduced Motion */
    @media (prefers-reduced-motion: reduce) {
      * {
        animation: none !important;
        transition: none !important;
      }
    }
  </style>
</MainLayout>
