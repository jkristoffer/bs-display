#!/bin/bash
# Claude Code Fast Commit - Local intelligent git commit
# Usage: ./scripts/commit  OR  alias /commit='./scripts/commit'

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Start timer
START_TIME=$(date +%s)

log_info "Claude Code Fast Commit starting..."

# Quick change check
if git diff --quiet && git diff --cached --quiet; then
  log_warning "No changes detected to commit"
  exit 0
fi

# Get changed files (super fast)
CHANGED_FILES=$(git diff --name-only 2>/dev/null || echo "")
if [ -z "$CHANGED_FILES" ]; then
  log_warning "No unstaged changes found"
  exit 0
fi

log_info "Analyzing $(echo "$CHANGED_FILES" | wc -l) changed file(s)..."

# Fast file filtering - exclude unwanted files in one pass  
FILTERED_FILES=$(echo "$CHANGED_FILES" | grep -v -E '\.(log|tmp|cache)$|node_modules/|\.DS_Store|temp|\.git/' | grep -v '^\.\./' | sed 's|^dev/||' || echo "")

if [ -z "$FILTERED_FILES" ]; then
  log_warning "No relevant files to commit (filtered out temp/log files)"
  exit 0
fi

# Ultra-fast commit type detection using pattern matching
COMMIT_TYPE="feat"
SCOPE=""

# Single-pass analysis for commit type
case "$CHANGED_FILES" in
  *\.md*|*README*|*docs/*) COMMIT_TYPE="docs" ;;
  *package*.json*) COMMIT_TYPE="chore" ;;
  *test*|*spec*) COMMIT_TYPE="test" ;;
  *\.css*|*\.scss*|*style*) COMMIT_TYPE="style" ;;
  *\.github/workflows/*) COMMIT_TYPE="ci" ;;
esac

# Quick scope detection
case "$CHANGED_FILES" in
  *src/components/*) SCOPE="components" ;;
  *src/pages/*) SCOPE="pages" ;;
  *scripts/*) SCOPE="scripts" ;;
  *.github/workflows/*) SCOPE="ci" ;;
esac

# Generate simple description
FILE_COUNT=$(echo "$FILTERED_FILES" | wc -l)
if [ $FILE_COUNT -eq 1 ]; then
  MAIN_FILE=$(echo "$FILTERED_FILES" | head -1)
  DESCRIPTION="update $(basename "$MAIN_FILE")"
else
  DESCRIPTION="update $FILE_COUNT files"
fi

# Build commit message
if [ -n "$SCOPE" ]; then
  COMMIT_MSG="$COMMIT_TYPE($SCOPE): $DESCRIPTION"
else
  COMMIT_MSG="$COMMIT_TYPE: $DESCRIPTION"
fi

log_info "Generated commit message: '$COMMIT_MSG'"

# Show files to be committed
echo ""
log_info "Files to commit:"
echo "$FILTERED_FILES" | sed 's/^/  üìù /'
echo ""

# Fast git operations
log_info "Staging files..."
# Use git add with proper file handling
while IFS= read -r file; do
  if [ -f "$file" ]; then
    git add "$file"
  else
    log_warning "Skipping missing file: $file"
  fi
done <<< "$FILTERED_FILES"

log_info "Creating commit..."
git commit -m "$COMMIT_MSG

ü§ñ Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"

log_info "Pushing to origin..."
git push origin main

# Calculate total time
END_TIME=$(date +%s)
TOTAL_TIME=$((END_TIME - START_TIME))

echo ""
log_success "Fast commit completed in ${TOTAL_TIME}s!"
log_success "Commit: $COMMIT_MSG"
log_success "Files: $FILE_COUNT committed and pushed"