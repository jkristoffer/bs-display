#!/bin/bash
# Auto-Claude GitHub Issue Processor
# Follows CLAUDE.md development standards

set -e

echo "🤖 Starting Auto-Claude Issue Processor"
echo "$(date): Processing GitHub issues with Claude Code CLI"

# Verify GitHub CLI is available and authenticated
if ! command -v gh &> /dev/null; then
  echo "❌ GitHub CLI not found in snapshot"
  exit 1
fi

if ! gh auth status &> /dev/null; then
  echo "❌ GitHub CLI not authenticated, trying token authentication..."
  if [ -n "$GITHUB_TOKEN" ]; then
    echo "$GITHUB_TOKEN" | gh auth login --with-token
    echo "✅ GitHub CLI authenticated with token"
  else
    echo "❌ No authentication available"
    exit 1
  fi
else
  echo "✅ GitHub CLI already authenticated"
fi

# Verify Claude CLI is available (should be pre-installed in snapshot)
if ! command -v claude &> /dev/null; then
  echo "❌ Claude CLI not found in snapshot"
  exit 1
fi

if ! claude auth status &> /dev/null; then
  echo "❌ Claude CLI not authenticated in snapshot"
  exit 1
fi

echo "✅ Claude CLI ready"

# Update to latest code (snapshot may be outdated)
echo "📥 Updating repository to latest..."
git fetch origin
git checkout main
git pull origin main

# Install/update dependencies if needed
if [ -f "package-lock.json" ]; then
  echo "📦 Updating dependencies..."
  npm ci
fi

# Get open issues with claude-task label
echo "🔍 Fetching open issues..."
ISSUES=$(gh issue list \
  --state open \
  --label "claude-task" \
  --json number,title,body,labels \
  --limit 1)

ISSUE_COUNT=$(echo "$ISSUES" | jq length)

if [ "$ISSUE_COUNT" -eq 0 ]; then
  echo "ℹ️ No issues found with 'claude-task' label"
  exit 0
fi

# Process the first issue
ISSUE_NUM=$(echo "$ISSUES" | jq -r '.[0].number')
ISSUE_TITLE=$(echo "$ISSUES" | jq -r '.[0].title')
ISSUE_BODY=$(echo "$ISSUES" | jq -r '.[0].body')

echo "🎯 Processing Issue #$ISSUE_NUM: $ISSUE_TITLE"

# Create working branch
BRANCH_NAME="auto/issue-$ISSUE_NUM"
git checkout -b "$BRANCH_NAME"

# Mark issue as in-progress
gh issue comment "$ISSUE_NUM" --body "🤖 **Auto-Claude Processing Started**

Started processing this issue automatically.
- Branch: \`$BRANCH_NAME\`
- Time: $(date)
- VPS: $(hostname)

Will create a PR if valid changes are generated."

# Create comprehensive context for Claude
CLAUDE_PROMPT="$ISSUE_TITLE

## Issue Description
$ISSUE_BODY

## Project Context
This is the bs-display project - an Astro-based e-commerce platform for interactive displays.

## Development Standards (from CLAUDE.md)
- Follow functional programming principles (pure functions, immutability)
- Use TypeScript throughout with strict typing
- Follow component standards in /src/development-standards/
- Run code review agent after changes: npm run tools:code-review -- --file [file]
- Ensure all changes pass: npm run check

## Automation Instructions
This is an automated process running on a VPS:
- Work autonomously following project standards
- If multiple approaches are possible, choose the most standard/common one
- If the request is unclear, implement the most reasonable interpretation
- Proceed with best practices and established patterns

## Instructions
Please implement the requested changes following the project's development standards."

# Use Claude Code CLI to process the issue (with automation flags)
echo "🧠 Running Claude Code CLI with automation flags..."

# Run Claude with --dangerously-skip-permissions for automation
if echo "$CLAUDE_PROMPT" | claude code --dangerously-skip-permissions 2>&1 | tee /tmp/claude_output.log; then
  echo "✅ Claude Code CLI completed successfully"
else
  CLAUDE_EXIT_CODE=$?
  echo "❌ Claude Code CLI failed (exit code: $CLAUDE_EXIT_CODE)"
  
  gh issue comment "$ISSUE_NUM" --body "🤖 **Processing Failed**

Claude Code CLI encountered an error (exit code: $CLAUDE_EXIT_CODE).
This could mean:
- The issue requires manual intervention
- There was an unexpected error in the automation
- The request may need clarification

Please review the issue or try processing manually."
  
  # Clean up
  git checkout main 2>/dev/null || true
  git branch -D "$BRANCH_NAME" 2>/dev/null || true
  exit 1
fi

# Check if any changes were made
if git diff --quiet && git diff --cached --quiet; then
  echo "ℹ️ No changes generated by Claude"
  gh issue comment "$ISSUE_NUM" --body "🤖 **No Changes Generated**

Claude processed the issue but did not generate any code changes.
This could mean:
- The issue requires manual intervention
- The request was unclear or incomplete
- The issue is already resolved

Please review the issue requirements."
  
  # Clean up branch
  git checkout main
  git branch -D "$BRANCH_NAME"
  exit 0
fi

echo "✅ Changes detected, validating..."

# Run TypeScript check (following CLAUDE.md standards)
echo "🔍 Running TypeScript validation..."
if ! npm run check; then
  echo "❌ TypeScript validation failed"
  gh issue comment "$ISSUE_NUM" --body "🤖 **TypeScript Validation Failed**

Generated changes failed TypeScript validation. The issue may require manual intervention or more specific requirements.

Please review and provide additional context if needed."
  
  # Clean up
  git checkout main
  git branch -D "$BRANCH_NAME"
  exit 1
fi

# Run code review agent on modified files (following CLAUDE.md)
echo "📋 Running code review agent..."
MODIFIED_FILES=$(git diff --name-only HEAD~1)
for file in $MODIFIED_FILES; do
  if [[ "$file" =~ \.(tsx?|jsx?|astro)$ ]]; then
    echo "Reviewing: $file"
    if ! npm run tools:code-review -- --file "$file"; then
      echo "⚠️ Code review issues detected in $file"
    fi
  fi
done

# Commit changes with proper message format
echo "💾 Committing changes..."
git add .
git commit -m "feat: $ISSUE_TITLE

Auto-generated implementation using Claude Code CLI following project standards:
- Functional programming principles applied
- TypeScript validation passed
- Code review agent validation completed

Closes #$ISSUE_NUM

🤖 Generated with Claude Code on VPS
Co-Authored-By: Claude <noreply@anthropic.com>"

# Push branch
echo "📤 Pushing branch..."
git push origin "$BRANCH_NAME"

# Create PR with comprehensive description
echo "🔀 Creating Pull Request..."
PR_BODY="## 🤖 Automated Implementation

This PR was automatically generated by Claude Code CLI to address issue #$ISSUE_NUM.

## Changes Made
$(git log --oneline HEAD~1..HEAD)

## Validation Completed
- ✅ TypeScript validation passed (\`npm run check\`)
- ✅ Code review agent validation completed
- ✅ Follows functional programming standards
- ✅ Adheres to project component standards

## Issue Context
$ISSUE_BODY

---

**Automated Process Details:**
- Generated on VPS infrastructure
- Followed CLAUDE.md development standards
- Ready for human review and testing

Closes #$ISSUE_NUM"

gh pr create \
  --title "feat: $ISSUE_TITLE" \
  --body "$PR_BODY" \
  --label "automated" \
  --label "claude-generated"

# Get PR URL and update issue
PR_URL=$(gh pr view --json url -q .url)

gh issue comment "$ISSUE_NUM" --body "🤖 **Pull Request Created**

✅ Successfully generated implementation and created PR: $PR_URL

## Summary
- Changes generated using Claude Code CLI
- All validations passed (TypeScript, code review)
- Follows project development standards
- Ready for human review

The PR will be automatically linked to close this issue when merged."

echo "🎉 Successfully processed issue #$ISSUE_NUM"
echo "📋 Created PR: $PR_URL"