name: Auto-Claude Issue Processor
on:
  workflow_dispatch:
    inputs:
      triggered_by:
        description: 'User who triggered the command'
        required: false
      comment_url:
        description: 'URL of the triggering comment'
        required: false
      scheduled_execution:
        description: 'Whether this is a scheduled execution'
        required: false
        default: 'false'

jobs:
  process-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup SSH key for VPS access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
        
      - name: Setup DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Spin up pre-configured VPS
        id: vps-setup
        run: |
          echo "üöÄ Spinning up VPS for auto-claude processing..."
          ./dev/vps-scripts/spin-up-no-wait.sh auto-claude-worker
        
      - name: Wait for VPS to be ready
        id: vps-wait
        run: |
          # Get the VPS IP with proper formatting
          VPS_IP=$(doctl compute droplet list --format "Name,PublicIPv4" --no-header | grep auto-claude-worker | awk '{print $2}')
          echo "VPS_IP=$VPS_IP" >> $GITHUB_ENV
          
          echo "üìç Found VPS IP: $VPS_IP"
          echo "‚è≥ Waiting for VPS to be ready at $VPS_IP..."
          
          # Add VPS to known hosts
          ssh-keyscan -H $VPS_IP >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Wait for SSH to be ready  
          for i in {1..30}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null dev@$VPS_IP 'echo "SSH ready"' 2>/dev/null; then
              echo "‚úÖ VPS ready at $VPS_IP"
              break
            fi
            echo "‚è≥ Waiting for VPS... ($i/30)"
            sleep 10
            
            # Debug info every 5 attempts
            if [ $((i % 5)) -eq 0 ]; then
              DROPLET_STATUS=$(doctl compute droplet list --format "Name,Status" --no-header | grep auto-claude-worker | awk '{print $2}')
              echo "üîç Droplet status: $DROPLET_STATUS"
            fi
          done
          
          # Final check
          if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 dev@$VPS_IP 'echo "Final SSH test"' 2>/dev/null; then
            echo "‚ùå SSH connection failed after timeout"
            echo "üîç Droplet info:"
            doctl compute droplet list | grep auto-claude-worker || echo "Droplet not found"
            exit 1
          fi
          
      - name: Process GitHub issues on VPS
        id: process-issues
        run: |
          echo "üß† Starting issue processing on VPS..."
          
          # First update to latest scripts, then run
          ssh -o StrictHostKeyChecking=no dev@$VPS_IP \
            "cd /opt/bs-display/dev && git pull origin main && ./scripts/process-github-issues.sh"
          
      - name: Cleanup VPS
        if: always()
        run: |
          echo "üßπ Starting comprehensive VPS cleanup..."
          
          # First, try to clean up the specific droplet if we know its ID
          if [ -n "$VPS_IP" ]; then
            echo "üìç Cleaning up droplet with IP: $VPS_IP"
            DROPLET_ID=$(doctl compute droplet list --format ID,PublicIPv4 --no-header | grep "$VPS_IP" | awk '{print $1}' || true)
            if [ -n "$DROPLET_ID" ]; then
              echo "üóëÔ∏è  Deleting specific droplet: $DROPLET_ID"
              doctl compute droplet delete "$DROPLET_ID" --force || echo "Failed to delete specific droplet"
            fi
          fi
          
          # Then clean up any remaining auto-claude droplets
          echo "üîç Searching for any remaining auto-claude droplets..."
          AUTO_CLAUDE_DROPLETS=$(doctl compute droplet list --format ID,Name --no-header | grep "auto-claude" | awk '{print $1}' || true)
          
          if [ -n "$AUTO_CLAUDE_DROPLETS" ]; then
            echo "üóëÔ∏è  Found auto-claude droplets to clean up:"
            echo "$AUTO_CLAUDE_DROPLETS" | while read -r droplet_id; do
              if [ -n "$droplet_id" ]; then
                echo "  Deleting droplet: $droplet_id"
                doctl compute droplet delete "$droplet_id" --force || echo "Failed to delete droplet $droplet_id"
              fi
            done
          else
            echo "‚úÖ No auto-claude droplets found"
          fi
          
          # Finally, run general cleanup for any orphaned bs-display droplets
          echo "üßπ Running general bs-display cleanup..."
          ./dev/vps-scripts/cleanup.sh droplets --force || echo "General cleanup completed with warnings"
          
          echo "‚úÖ VPS cleanup completed"
        
      - name: Report completion
        if: github.event.inputs.comment_url && success()
        run: |
          TRIGGERED_BY="${{ github.event.inputs.triggered_by }}"
          SCHEDULED="${{ github.event.inputs.scheduled_execution }}"
          
          if [ "$SCHEDULED" == "true" ]; then
            STATUS_MESSAGE="ü§ñ **Scheduled Auto-Claude Completed**
            
            ‚úÖ Processing completed as scheduled by @$TRIGGERED_BY
            
            Check the repository for any new PRs that were created."
          else
            STATUS_MESSAGE="ü§ñ **Auto-Claude Completed**
            
            ‚úÖ Processing completed immediately as requested by @$TRIGGERED_BY
            
            Check the repository for any new PRs that were created."
          fi
          
          # Extract issue number from comment URL and post response
          COMMENT_URL="${{ github.event.inputs.comment_url }}"
          if [[ "$COMMENT_URL" =~ /issues/([0-9]+)# ]]; then
            ISSUE_NUMBER="${BASH_REMATCH[1]}"
            echo "Posting to issue #$ISSUE_NUMBER"
            gh api repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments \
              --method POST \
              --field body="$STATUS_MESSAGE"
          else
            echo "Could not extract issue number from: $COMMENT_URL"
            echo "Status: $STATUS_MESSAGE"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create failure issue
        if: failure()
        run: |
          # Get failure details
          TRIGGERED_BY="${{ github.event.inputs.triggered_by || 'unknown' }}"
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Determine which step failed
          FAILED_STEP="Unknown"
          if [ "${{ steps.vps-setup }}" == "failure" ]; then
            FAILED_STEP="VPS Setup"
          elif [ "${{ steps.vps-wait }}" == "failure" ]; then
            FAILED_STEP="VPS SSH Connection"
          elif [ "${{ steps.process-issues }}" == "failure" ]; then
            FAILED_STEP="Claude Issue Processing"
          fi
          
          # Create detailed issue
          ISSUE_BODY="## üö® Auto-Claude Workflow Failure
          
          **Failed Step:** $FAILED_STEP  
          **Triggered By:** @$TRIGGERED_BY  
          **Time:** $TIMESTAMP  
          **Workflow Run:** [View Logs]($WORKFLOW_URL)
          
          ## Failure Context
          
          - **Original Comment:** ${{ github.event.inputs.comment_url || 'Manual trigger' }}
          - **Repository:** ${{ github.repository }}
          - **Branch:** ${{ github.ref_name }}
          - **Commit:** ${{ github.sha }}
          
          ## Investigation Steps
          
          1. **Check workflow logs:** [View full run]($WORKFLOW_URL)
          2. **Review VPS status:** \`doctl compute droplet list --tag-name bs-display\`
          3. **Test manually:** \`./vps-scripts/spin-up.sh debug-failure\`
          4. **Check script:** \`scripts/process-github-issues.sh\`
          
          ## Common Causes
          
          - **VPS Setup Issues:** Snapshot problems, SSH key configuration
          - **SSH Connection:** Network timeouts, authentication failures  
          - **Claude Processing:** API limits, authentication issues, script errors
          - **GitHub API:** Rate limits, permission issues
          
          ## Quick Fixes
          
          \`\`\`bash
          # Clean up any stuck resources
          ./vps-scripts/cleanup.sh droplets --force
          
          # Test VPS connectivity
          ./vps-scripts/test-prerequisites.sh
          
          # Retry manually
          /auto-claude now
          \`\`\`
          
          ## Next Steps
          
          - [ ] Review logs and identify root cause
          - [ ] Apply fix to prevent recurrence  
          - [ ] Test fix with manual trigger
          - [ ] Close issue when resolved
          
          ---
          
          **Auto-generated by workflow failure on $(date)**"
          
          # Create the issue (add claude-task for potential auto-fixing)
          gh issue create \
            --title "üö® Auto-Claude Workflow Failed: $FAILED_STEP ($TIMESTAMP)" \
            --body "$ISSUE_BODY" \
            --label "bug,auto-claude,workflow-failure,claude-task" \
            --assignee "$TRIGGERED_BY"
            
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Report failure to comment
        if: failure() && github.event.inputs.comment_url
        run: |
          TRIGGERED_BY="${{ github.event.inputs.triggered_by }}"
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          FAILURE_MESSAGE="ü§ñ **Auto-Claude Processing Failed**
          
          ‚ùå The auto-claude workflow encountered an error.
          
          **Details:**
          - Triggered by: @$TRIGGERED_BY
          - Time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          - [View logs]($WORKFLOW_URL)
          
          **Next Steps:**
          1. A failure issue has been automatically created
          2. Check workflow logs for details
          3. Try again after fixes are applied
          
          **Quick Retry:** Comment \`/auto-claude now\` to try again."
          
          # Extract issue number and post failure notification
          COMMENT_URL="${{ github.event.inputs.comment_url }}"
          if [[ "$COMMENT_URL" =~ /issues/([0-9]+)# ]]; then
            ISSUE_NUMBER="${BASH_REMATCH[1]}"
            echo "Posting failure to issue #$ISSUE_NUMBER"
            gh api repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments \
              --method POST \
              --field body="$FAILURE_MESSAGE"
          else
            echo "Could not extract issue number from: $COMMENT_URL"
            echo "Failure: $FAILURE_MESSAGE"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}