#!/usr/bin/env python3
"""
AI Task Compiler - AI-First Development with Worktree Isolation
Uses git worktrees by default for complete isolation and enterprise-grade workflow
"""

import subprocess
import sys
from pathlib import Path

class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    CYAN = '\033[96m'
    BOLD = '\033[1m'
    END = '\033[0m'

def main():
    """Main entry point - delegates to worktree orchestrator"""
    orchestrator_dir = Path(__file__).parent / "orchestrator"
    worktree_script = orchestrator_dir / "ai-worktree-orchestrator.py"
    
    if not worktree_script.exists():
        print(f"{Colors.RED}Error: Worktree orchestrator not found at {worktree_script}{Colors.END}")
        print(f"{Colors.YELLOW}Expected location: {worktree_script}{Colors.END}")
        print(f"{Colors.YELLOW}Please ensure the orchestrator directory exists with ai-worktree-orchestrator.py{Colors.END}")
        sys.exit(1)
    
    if len(sys.argv) < 2:
        print(f"{Colors.CYAN}{Colors.BOLD}🤖 AI Task Compiler - AI-First Development{Colors.END}")
        print(f"\nUsage: ai \"what you want\"")
        print(f"\nExamples:")
        print(f'  ai "build a FAQ page"')
        print(f'  ai "create a contact form"')
        print(f'  ai "make a search bar"')
        print(f"\n🌳 Full AI Pipeline:")
        print(f"  1. Create dedicated worktree")
        print(f"  2. Generate component")
        print(f"  3. Validate standards")
        print(f"  4. Run tests")
        print(f"  5. Integrate files")
        print(f"  6. Create commit")
        print(f"\n🌳 AI-First Benefits:")
        print(f"  • Complete isolation from main development")
        print(f"  • Parallel component development")
        print(f"  • Safe testing environment")
        print(f"  • Full validation and quality assurance")
        print(f"  • Ready-to-merge commits")
        sys.exit(1)
    
    # Delegate to worktree orchestrator (it handles all output)
    cmd = [sys.executable, str(worktree_script)] + sys.argv[1:]
    
    try:
        result = subprocess.run(cmd, check=True)
        sys.exit(result.returncode)
    except subprocess.CalledProcessError as e:
        print(f"\n{Colors.RED}❌ Worktree orchestrator failed with exit code: {e.returncode}{Colors.END}")
        sys.exit(e.returncode)
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}⚠️ Interrupted by user{Colors.END}")
        sys.exit(1)
    except FileNotFoundError:
        print(f"{Colors.RED}Error: Python interpreter not found{Colors.END}")
        sys.exit(1)

if __name__ == "__main__":
    main()